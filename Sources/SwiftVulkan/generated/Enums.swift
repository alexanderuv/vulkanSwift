//
// Copyright (c) Alexander Ubillus. All rights reserved.
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// This code has been autogenerated. DO NOT edit this file.
//

// Enums.swift - contains all Vulkan handle types

import CVulkan
import SwiftVulkanUnions

// Mapped from VkAccelerationStructureMemoryRequirementsTypeNV
public enum AccelerationStructureMemoryRequirementsTypeNV: UInt32 {
    case objectNV = 0
    case buildScratchNV = 1
    case updateScratchNV = 2
    
    var vulkanValue: VkAccelerationStructureMemoryRequirementsTypeNV {
        get {
            return VkAccelerationStructureMemoryRequirementsTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkAccelerationStructureTypeNV
public enum AccelerationStructureTypeNV: UInt32 {
    case topLevelNV = 0
    case bottomLevelNV = 1
    
    var vulkanValue: VkAccelerationStructureTypeNV {
        get {
            return VkAccelerationStructureTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkAttachmentLoadOp
public enum AttachmentLoadOp: UInt32 {
    case load = 0
    case clear = 1
    case dontCare = 2
    
    var vulkanValue: VkAttachmentLoadOp {
        get {
            return VkAttachmentLoadOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkAttachmentStoreOp
public enum AttachmentStoreOp: UInt32 {
    case store = 0
    case dontCare = 1
    
    var vulkanValue: VkAttachmentStoreOp {
        get {
            return VkAttachmentStoreOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBlendFactor
public enum BlendFactor: UInt32 {
    case zero = 0
    case one = 1
    case srcColor = 2
    case oneMinusSrcColor = 3
    case dstColor = 4
    case oneMinusDstColor = 5
    case srcAlpha = 6
    case oneMinusSrcAlpha = 7
    case dstAlpha = 8
    case oneMinusDstAlpha = 9
    case constantColor = 10
    case oneMinusConstantColor = 11
    case constantAlpha = 12
    case oneMinusConstantAlpha = 13
    case srcAlphaSaturate = 14
    case src1Color = 15
    case oneMinusSrc1Color = 16
    case src1Alpha = 17
    case oneMinusSrc1Alpha = 18
    
    var vulkanValue: VkBlendFactor {
        get {
            return VkBlendFactor(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBlendOp
public enum BlendOp: UInt32 {
    case add = 0
    case subtract = 1
    case reverseSubtract = 2
    case min = 3
    case max = 4
    case zeroEXT = 1000148000
    case srcEXT = 1000148001
    case dstEXT = 1000148002
    case srcOverEXT = 1000148003
    case dstOverEXT = 1000148004
    case srcInEXT = 1000148005
    case dstInEXT = 1000148006
    case srcOutEXT = 1000148007
    case dstOutEXT = 1000148008
    case srcAtopEXT = 1000148009
    case dstAtopEXT = 1000148010
    case xorEXT = 1000148011
    case multiplyEXT = 1000148012
    case screenEXT = 1000148013
    case overlayEXT = 1000148014
    case darkenEXT = 1000148015
    case lightenEXT = 1000148016
    case colordodgeEXT = 1000148017
    case colorburnEXT = 1000148018
    case hardlightEXT = 1000148019
    case softlightEXT = 1000148020
    case differenceEXT = 1000148021
    case exclusionEXT = 1000148022
    case invertEXT = 1000148023
    case invertRgbEXT = 1000148024
    case lineardodgeEXT = 1000148025
    case linearburnEXT = 1000148026
    case vividlightEXT = 1000148027
    case linearlightEXT = 1000148028
    case pinlightEXT = 1000148029
    case hardmixEXT = 1000148030
    case hslHueEXT = 1000148031
    case hslSaturationEXT = 1000148032
    case hslColorEXT = 1000148033
    case hslLuminosityEXT = 1000148034
    case plusEXT = 1000148035
    case plusClampedEXT = 1000148036
    case plusClampedAlphaEXT = 1000148037
    case plusDarkerEXT = 1000148038
    case minusEXT = 1000148039
    case minusClampedEXT = 1000148040
    case contrastEXT = 1000148041
    case invertOvgEXT = 1000148042
    case redEXT = 1000148043
    case greenEXT = 1000148044
    case blueEXT = 1000148045
    
    var vulkanValue: VkBlendOp {
        get {
            return VkBlendOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBlendOverlapEXT
public enum BlendOverlapEXT: UInt32 {
    case uncorrelatedEXT = 0
    case disjointEXT = 1
    case conjointEXT = 2
    
    var vulkanValue: VkBlendOverlapEXT {
        get {
            return VkBlendOverlapEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBorderColor
public enum BorderColor: UInt32 {
    case floatTransparentBlack = 0
    case intTransparentBlack = 1
    case floatOpaqueBlack = 2
    case intOpaqueBlack = 3
    case floatOpaqueWhite = 4
    case intOpaqueWhite = 5
    
    var vulkanValue: VkBorderColor {
        get {
            return VkBorderColor(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkChromaLocation
public enum ChromaLocation: UInt32 {
    case cositedEven = 0
    case midpoint = 1
    
    public static let cositedEvenKHR = cositedEven
    public static let midpointKHR = midpoint
    
    var vulkanValue: VkChromaLocation {
        get {
            return VkChromaLocation(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCoarseSampleOrderTypeNV
public enum CoarseSampleOrderTypeNV: UInt32 {
    case defaultNV = 0
    case customNV = 1
    case pixelMajorNV = 2
    case sampleMajorNV = 3
    
    var vulkanValue: VkCoarseSampleOrderTypeNV {
        get {
            return VkCoarseSampleOrderTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkColorSpaceKHR
public enum ColorSpaceKHR: UInt32 {
    case srgbNonlinearKHR = 0
    case displayP3NonlinearEXT = 1000104001
    case endedSrgbLinearEXT = 1000104002
    case displayP3LinearEXT = 1000104003
    case dciP3NonlinearEXT = 1000104004
    case bt709LinearEXT = 1000104005
    case bt709NonlinearEXT = 1000104006
    case bt2020LinearEXT = 1000104007
    case hdr10St2084EXT = 1000104008
    case dolbyvisionEXT = 1000104009
    case hdr10HlgEXT = 1000104010
    case adobergbLinearEXT = 1000104011
    case adobergbNonlinearEXT = 1000104012
    case passThroughEXT = 1000104013
    case endedSrgbNonlinearEXT = 1000104014
    case displayNativeAMD = 1000213000
    
    public static let colorspaceSrgbNonlinearKHR = srgbNonlinearKHR
    public static let dciP3LinearEXT = displayP3LinearEXT
    
    var vulkanValue: VkColorSpaceKHR {
        get {
            return VkColorSpaceKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandBufferLevel
public enum CommandBufferLevel: UInt32 {
    case primary = 0
    case secondary = 1
    
    var vulkanValue: VkCommandBufferLevel {
        get {
            return VkCommandBufferLevel(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCompareOp
public enum CompareOp: UInt32 {
    case never = 0
    case less = 1
    case equal = 2
    case lessOrEqual = 3
    case greater = 4
    case notEqual = 5
    case greaterOrEqual = 6
    case always = 7
    
    var vulkanValue: VkCompareOp {
        get {
            return VkCompareOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkComponentSwizzle
public enum ComponentSwizzle: UInt32 {
    case identity = 0
    case zero = 1
    case one = 2
    case r = 3
    case g = 4
    case b = 5
    case a = 6
    
    var vulkanValue: VkComponentSwizzle {
        get {
            return VkComponentSwizzle(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkComponentTypeNV
public enum ComponentTypeNV: UInt32 {
    case float16NV = 0
    case float32NV = 1
    case float64NV = 2
    case sint8NV = 3
    case sint16NV = 4
    case sint32NV = 5
    case sint64NV = 6
    case uint8NV = 7
    case uint16NV = 8
    case uint32NV = 9
    case uint64NV = 10
    
    var vulkanValue: VkComponentTypeNV {
        get {
            return VkComponentTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkConservativeRasterizationModeEXT
public enum ConservativeRasterizationModeEXT: UInt32 {
    case disabledEXT = 0
    case overestimateEXT = 1
    case underestimateEXT = 2
    
    var vulkanValue: VkConservativeRasterizationModeEXT {
        get {
            return VkConservativeRasterizationModeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCopyAccelerationStructureModeNV
public enum CopyAccelerationStructureModeNV: UInt32 {
    case cloneNV = 0
    case compactNV = 1
    
    var vulkanValue: VkCopyAccelerationStructureModeNV {
        get {
            return VkCopyAccelerationStructureModeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCoverageModulationModeNV
public enum CoverageModulationModeNV: UInt32 {
    case noneNV = 0
    case rgbNV = 1
    case alphaNV = 2
    case rgbaNV = 3
    
    var vulkanValue: VkCoverageModulationModeNV {
        get {
            return VkCoverageModulationModeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCoverageReductionModeNV
public enum CoverageReductionModeNV: UInt32 {
    case mergeNV = 0
    case truncateNV = 1
    
    var vulkanValue: VkCoverageReductionModeNV {
        get {
            return VkCoverageReductionModeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugReportObjectTypeEXT
public enum DebugReportObjectTypeEXT: UInt32 {
    case unknownEXT = 0
    case instanceEXT = 1
    case physicalDeviceEXT = 2
    case deviceEXT = 3
    case queueEXT = 4
    case semaphoreEXT = 5
    case commandBufferEXT = 6
    case fenceEXT = 7
    case deviceMemoryEXT = 8
    case bufferEXT = 9
    case imageEXT = 10
    case eventEXT = 11
    case queryPoolEXT = 12
    case bufferViewEXT = 13
    case imageViewEXT = 14
    case shaderModuleEXT = 15
    case pipelineCacheEXT = 16
    case pipelineLayoutEXT = 17
    case renderPassEXT = 18
    case pipelineEXT = 19
    case descriptorSetLayoutEXT = 20
    case samplerEXT = 21
    case descriptorPoolEXT = 22
    case descriptorSetEXT = 23
    case framebufferEXT = 24
    case commandPoolEXT = 25
    case surfaceKhrEXT = 26
    case swapchainKhrEXT = 27
    case debugReportCallbackEXT = 28
    case displayKhrEXT = 29
    case displayModeKhrEXT = 30
    case objectTableNvxEXT = 31
    case indirectCommandsLayoutNvxEXT = 32
    case validationCacheEXT = 33
    case samplerYcbcrConversionEXT = 1000156000
    case descriptorUpdateTemplateEXT = 1000085000
    case accelerationStructureNvEXT = 1000165000
    
    public static let debugReportEXT = debugReportCallbackEXT
    public static let descriptorUpdateTemplateKhrEXT = descriptorUpdateTemplateEXT
    public static let samplerYcbcrConversionKhrEXT = samplerYcbcrConversionEXT
    
    var vulkanValue: VkDebugReportObjectTypeEXT {
        get {
            return VkDebugReportObjectTypeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorType
public enum DescriptorType: UInt32 {
    case sampler = 0
    case combinedImageSampler = 1
    case sampledImage = 2
    case storageImage = 3
    case uniformTexelBuffer = 4
    case storageTexelBuffer = 5
    case uniformBuffer = 6
    case storageBuffer = 7
    case uniformBufferDynamic = 8
    case storageBufferDynamic = 9
    case inputAttachment = 10
    case inlineUniformBlockEXT = 1000138000
    case accelerationStructureNV = 1000165000
    
    var vulkanValue: VkDescriptorType {
        get {
            return VkDescriptorType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorUpdateTemplateType
public enum DescriptorUpdateTemplateType: UInt32 {
    case descriptorSet = 0
    case pushDescriptorsKHR = 1000080000
    
    public static let descriptorSetKHR = descriptorSet
    
    var vulkanValue: VkDescriptorUpdateTemplateType {
        get {
            return VkDescriptorUpdateTemplateType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDeviceEventTypeEXT
public enum DeviceEventTypeEXT: UInt32 {
    case displayHotplugEXT = 0
    
    var vulkanValue: VkDeviceEventTypeEXT {
        get {
            return VkDeviceEventTypeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDiscardRectangleModeEXT
public enum DiscardRectangleModeEXT: UInt32 {
    case inclusiveEXT = 0
    case exclusiveEXT = 1
    
    var vulkanValue: VkDiscardRectangleModeEXT {
        get {
            return VkDiscardRectangleModeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDisplayEventTypeEXT
public enum DisplayEventTypeEXT: UInt32 {
    case firstPixelOutEXT = 0
    
    var vulkanValue: VkDisplayEventTypeEXT {
        get {
            return VkDisplayEventTypeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDisplayPowerStateEXT
public enum DisplayPowerStateEXT: UInt32 {
    case offEXT = 0
    case suspendEXT = 1
    case onEXT = 2
    
    var vulkanValue: VkDisplayPowerStateEXT {
        get {
            return VkDisplayPowerStateEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDriverIdKHR
public enum DriverIdKHR: UInt32 {
    case amdProprietaryKHR = 1
    case amdOpenSourceKHR = 2
    case mesaRadvKHR = 3
    case nvidiaProprietaryKHR = 4
    case intelProprietaryWindowsKHR = 5
    case intelOpenSourceMesaKHR = 6
    case imaginationProprietaryKHR = 7
    case qualcommProprietaryKHR = 8
    case armProprietaryKHR = 9
    case googleSwiftshaderKHR = 10
    case ggpProprietaryKHR = 11
    case broadcomProprietaryKHR = 12
    
    var vulkanValue: VkDriverIdKHR {
        get {
            return VkDriverIdKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDynamicState
public enum DynamicState: UInt32 {
    case viewport = 0
    case scissor = 1
    case lineWidth = 2
    case depthBias = 3
    case blendConstants = 4
    case depthBounds = 5
    case stencilCompareMask = 6
    case stencilWriteMask = 7
    case stencilReference = 8
    case viewportWScalingNV = 1000087000
    case discardRectangleEXT = 1000099000
    case sampleLocationsEXT = 1000143000
    case viewportShadingRatePaletteNV = 1000164004
    case viewportCoarseSampleOrderNV = 1000164006
    case exclusiveScissorNV = 1000205001
    case lineStippleEXT = 1000259000
    
    var vulkanValue: VkDynamicState {
        get {
            return VkDynamicState(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFilter
public enum Filter: UInt32 {
    case nearest = 0
    case linear = 1
    case cubicIMG = 1000015000
    
    public static let cubicEXT = cubicIMG
    
    var vulkanValue: VkFilter {
        get {
            return VkFilter(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFormat
public enum Format: UInt32 {
    case undefined = 0
    case r4g4UnormPack8 = 1
    case r4g4b4a4UnormPack16 = 2
    case b4g4r4a4UnormPack16 = 3
    case r5g6b5UnormPack16 = 4
    case b5g6r5UnormPack16 = 5
    case r5g5b5a1UnormPack16 = 6
    case b5g5r5a1UnormPack16 = 7
    case a1r5g5b5UnormPack16 = 8
    case r8Unorm = 9
    case r8Snorm = 10
    case r8Uscaled = 11
    case r8Sscaled = 12
    case r8Uint = 13
    case r8Sint = 14
    case r8Srgb = 15
    case r8g8Unorm = 16
    case r8g8Snorm = 17
    case r8g8Uscaled = 18
    case r8g8Sscaled = 19
    case r8g8Uint = 20
    case r8g8Sint = 21
    case r8g8Srgb = 22
    case r8g8b8Unorm = 23
    case r8g8b8Snorm = 24
    case r8g8b8Uscaled = 25
    case r8g8b8Sscaled = 26
    case r8g8b8Uint = 27
    case r8g8b8Sint = 28
    case r8g8b8Srgb = 29
    case b8g8r8Unorm = 30
    case b8g8r8Snorm = 31
    case b8g8r8Uscaled = 32
    case b8g8r8Sscaled = 33
    case b8g8r8Uint = 34
    case b8g8r8Sint = 35
    case b8g8r8Srgb = 36
    case r8g8b8a8Unorm = 37
    case r8g8b8a8Snorm = 38
    case r8g8b8a8Uscaled = 39
    case r8g8b8a8Sscaled = 40
    case r8g8b8a8Uint = 41
    case r8g8b8a8Sint = 42
    case r8g8b8a8Srgb = 43
    case b8g8r8a8Unorm = 44
    case b8g8r8a8Snorm = 45
    case b8g8r8a8Uscaled = 46
    case b8g8r8a8Sscaled = 47
    case b8g8r8a8Uint = 48
    case b8g8r8a8Sint = 49
    case b8g8r8a8Srgb = 50
    case a8b8g8r8UnormPack32 = 51
    case a8b8g8r8SnormPack32 = 52
    case a8b8g8r8UscaledPack32 = 53
    case a8b8g8r8SscaledPack32 = 54
    case a8b8g8r8UintPack32 = 55
    case a8b8g8r8SintPack32 = 56
    case a8b8g8r8SrgbPack32 = 57
    case a2r10g10b10UnormPack32 = 58
    case a2r10g10b10SnormPack32 = 59
    case a2r10g10b10UscaledPack32 = 60
    case a2r10g10b10SscaledPack32 = 61
    case a2r10g10b10UintPack32 = 62
    case a2r10g10b10SintPack32 = 63
    case a2b10g10r10UnormPack32 = 64
    case a2b10g10r10SnormPack32 = 65
    case a2b10g10r10UscaledPack32 = 66
    case a2b10g10r10SscaledPack32 = 67
    case a2b10g10r10UintPack32 = 68
    case a2b10g10r10SintPack32 = 69
    case r16Unorm = 70
    case r16Snorm = 71
    case r16Uscaled = 72
    case r16Sscaled = 73
    case r16Uint = 74
    case r16Sint = 75
    case r16Sfloat = 76
    case r16g16Unorm = 77
    case r16g16Snorm = 78
    case r16g16Uscaled = 79
    case r16g16Sscaled = 80
    case r16g16Uint = 81
    case r16g16Sint = 82
    case r16g16Sfloat = 83
    case r16g16b16Unorm = 84
    case r16g16b16Snorm = 85
    case r16g16b16Uscaled = 86
    case r16g16b16Sscaled = 87
    case r16g16b16Uint = 88
    case r16g16b16Sint = 89
    case r16g16b16Sfloat = 90
    case r16g16b16a16Unorm = 91
    case r16g16b16a16Snorm = 92
    case r16g16b16a16Uscaled = 93
    case r16g16b16a16Sscaled = 94
    case r16g16b16a16Uint = 95
    case r16g16b16a16Sint = 96
    case r16g16b16a16Sfloat = 97
    case r32Uint = 98
    case r32Sint = 99
    case r32Sfloat = 100
    case r32g32Uint = 101
    case r32g32Sint = 102
    case r32g32Sfloat = 103
    case r32g32b32Uint = 104
    case r32g32b32Sint = 105
    case r32g32b32Sfloat = 106
    case r32g32b32a32Uint = 107
    case r32g32b32a32Sint = 108
    case r32g32b32a32Sfloat = 109
    case r64Uint = 110
    case r64Sint = 111
    case r64Sfloat = 112
    case r64g64Uint = 113
    case r64g64Sint = 114
    case r64g64Sfloat = 115
    case r64g64b64Uint = 116
    case r64g64b64Sint = 117
    case r64g64b64Sfloat = 118
    case r64g64b64a64Uint = 119
    case r64g64b64a64Sint = 120
    case r64g64b64a64Sfloat = 121
    case b10g11r11UfloatPack32 = 122
    case e5b9g9r9UfloatPack32 = 123
    case d16Unorm = 124
    case x8D24UnormPack32 = 125
    case d32Sfloat = 126
    case s8Uint = 127
    case d16UnormS8Uint = 128
    case d24UnormS8Uint = 129
    case d32SfloatS8Uint = 130
    case bc1RgbUnormBlock = 131
    case bc1RgbSrgbBlock = 132
    case bc1RgbaUnormBlock = 133
    case bc1RgbaSrgbBlock = 134
    case bc2UnormBlock = 135
    case bc2SrgbBlock = 136
    case bc3UnormBlock = 137
    case bc3SrgbBlock = 138
    case bc4UnormBlock = 139
    case bc4SnormBlock = 140
    case bc5UnormBlock = 141
    case bc5SnormBlock = 142
    case bc6hUfloatBlock = 143
    case bc6hSfloatBlock = 144
    case bc7UnormBlock = 145
    case bc7SrgbBlock = 146
    case etc2R8g8b8UnormBlock = 147
    case etc2R8g8b8SrgbBlock = 148
    case etc2R8g8b8a1UnormBlock = 149
    case etc2R8g8b8a1SrgbBlock = 150
    case etc2R8g8b8a8UnormBlock = 151
    case etc2R8g8b8a8SrgbBlock = 152
    case eacR11UnormBlock = 153
    case eacR11SnormBlock = 154
    case eacR11g11UnormBlock = 155
    case eacR11g11SnormBlock = 156
    case astc4x4UnormBlock = 157
    case astc4x4SrgbBlock = 158
    case astc5x4UnormBlock = 159
    case astc5x4SrgbBlock = 160
    case astc5x5UnormBlock = 161
    case astc5x5SrgbBlock = 162
    case astc6x5UnormBlock = 163
    case astc6x5SrgbBlock = 164
    case astc6x6UnormBlock = 165
    case astc6x6SrgbBlock = 166
    case astc8x5UnormBlock = 167
    case astc8x5SrgbBlock = 168
    case astc8x6UnormBlock = 169
    case astc8x6SrgbBlock = 170
    case astc8x8UnormBlock = 171
    case astc8x8SrgbBlock = 172
    case astc10x5UnormBlock = 173
    case astc10x5SrgbBlock = 174
    case astc10x6UnormBlock = 175
    case astc10x6SrgbBlock = 176
    case astc10x8UnormBlock = 177
    case astc10x8SrgbBlock = 178
    case astc10x10UnormBlock = 179
    case astc10x10SrgbBlock = 180
    case astc12x10UnormBlock = 181
    case astc12x10SrgbBlock = 182
    case astc12x12UnormBlock = 183
    case astc12x12SrgbBlock = 184
    case g8b8g8r8422Unorm = 1000156000
    case b8g8r8g8422Unorm = 1000156001
    case g8B8R83plane420Unorm = 1000156002
    case g8B8r82plane420Unorm = 1000156003
    case g8B8R83plane422Unorm = 1000156004
    case g8B8r82plane422Unorm = 1000156005
    case g8B8R83plane444Unorm = 1000156006
    case r10x6UnormPack16 = 1000156007
    case r10x6g10x6Unorm2pack16 = 1000156008
    case r10x6g10x6b10x6a10x6Unorm4pack16 = 1000156009
    case g10x6b10x6g10x6r10x6422Unorm4pack16 = 1000156010
    case b10x6g10x6r10x6g10x6422Unorm4pack16 = 1000156011
    case g10x6B10x6R10x63plane420Unorm3pack16 = 1000156012
    case g10x6B10x6r10x62plane420Unorm3pack16 = 1000156013
    case g10x6B10x6R10x63plane422Unorm3pack16 = 1000156014
    case g10x6B10x6r10x62plane422Unorm3pack16 = 1000156015
    case g10x6B10x6R10x63plane444Unorm3pack16 = 1000156016
    case r12x4UnormPack16 = 1000156017
    case r12x4g12x4Unorm2pack16 = 1000156018
    case r12x4g12x4b12x4a12x4Unorm4pack16 = 1000156019
    case g12x4b12x4g12x4r12x4422Unorm4pack16 = 1000156020
    case b12x4g12x4r12x4g12x4422Unorm4pack16 = 1000156021
    case g12x4B12x4R12x43plane420Unorm3pack16 = 1000156022
    case g12x4B12x4r12x42plane420Unorm3pack16 = 1000156023
    case g12x4B12x4R12x43plane422Unorm3pack16 = 1000156024
    case g12x4B12x4r12x42plane422Unorm3pack16 = 1000156025
    case g12x4B12x4R12x43plane444Unorm3pack16 = 1000156026
    case g16b16g16r16422Unorm = 1000156027
    case b16g16r16g16422Unorm = 1000156028
    case g16B16R163plane420Unorm = 1000156029
    case g16B16r162plane420Unorm = 1000156030
    case g16B16R163plane422Unorm = 1000156031
    case g16B16r162plane422Unorm = 1000156032
    case g16B16R163plane444Unorm = 1000156033
    case pvrtc12bppUnormBlockIMG = 1000054000
    case pvrtc14bppUnormBlockIMG = 1000054001
    case pvrtc22bppUnormBlockIMG = 1000054002
    case pvrtc24bppUnormBlockIMG = 1000054003
    case pvrtc12bppSrgbBlockIMG = 1000054004
    case pvrtc14bppSrgbBlockIMG = 1000054005
    case pvrtc22bppSrgbBlockIMG = 1000054006
    case pvrtc24bppSrgbBlockIMG = 1000054007
    case astc4x4SfloatBlockEXT = 1000066000
    case astc5x4SfloatBlockEXT = 1000066001
    case astc5x5SfloatBlockEXT = 1000066002
    case astc6x5SfloatBlockEXT = 1000066003
    case astc6x6SfloatBlockEXT = 1000066004
    case astc8x5SfloatBlockEXT = 1000066005
    case astc8x6SfloatBlockEXT = 1000066006
    case astc8x8SfloatBlockEXT = 1000066007
    case astc10x5SfloatBlockEXT = 1000066008
    case astc10x6SfloatBlockEXT = 1000066009
    case astc10x8SfloatBlockEXT = 1000066010
    case astc10x10SfloatBlockEXT = 1000066011
    case astc12x10SfloatBlockEXT = 1000066012
    case astc12x12SfloatBlockEXT = 1000066013
    
    public static let g8b8g8r8422UnormKHR = g8b8g8r8422Unorm
    public static let b8g8r8g8422UnormKHR = b8g8r8g8422Unorm
    public static let g8B8R83plane420UnormKHR = g8B8R83plane420Unorm
    public static let g8B8r82plane420UnormKHR = g8B8r82plane420Unorm
    public static let g8B8R83plane422UnormKHR = g8B8R83plane422Unorm
    public static let g8B8r82plane422UnormKHR = g8B8r82plane422Unorm
    public static let g8B8R83plane444UnormKHR = g8B8R83plane444Unorm
    public static let r10x6UnormPack16KHR = r10x6UnormPack16
    public static let r10x6g10x6Unorm2pack16KHR = r10x6g10x6Unorm2pack16
    public static let r10x6g10x6b10x6a10x6Unorm4pack16KHR = r10x6g10x6b10x6a10x6Unorm4pack16
    public static let g10x6b10x6g10x6r10x6422Unorm4pack16KHR = g10x6b10x6g10x6r10x6422Unorm4pack16
    public static let b10x6g10x6r10x6g10x6422Unorm4pack16KHR = b10x6g10x6r10x6g10x6422Unorm4pack16
    public static let g10x6B10x6R10x63plane420Unorm3pack16KHR = g10x6B10x6R10x63plane420Unorm3pack16
    public static let g10x6B10x6r10x62plane420Unorm3pack16KHR = g10x6B10x6r10x62plane420Unorm3pack16
    public static let g10x6B10x6R10x63plane422Unorm3pack16KHR = g10x6B10x6R10x63plane422Unorm3pack16
    public static let g10x6B10x6r10x62plane422Unorm3pack16KHR = g10x6B10x6r10x62plane422Unorm3pack16
    public static let g10x6B10x6R10x63plane444Unorm3pack16KHR = g10x6B10x6R10x63plane444Unorm3pack16
    public static let r12x4UnormPack16KHR = r12x4UnormPack16
    public static let r12x4g12x4Unorm2pack16KHR = r12x4g12x4Unorm2pack16
    public static let r12x4g12x4b12x4a12x4Unorm4pack16KHR = r12x4g12x4b12x4a12x4Unorm4pack16
    public static let g12x4b12x4g12x4r12x4422Unorm4pack16KHR = g12x4b12x4g12x4r12x4422Unorm4pack16
    public static let b12x4g12x4r12x4g12x4422Unorm4pack16KHR = b12x4g12x4r12x4g12x4422Unorm4pack16
    public static let g12x4B12x4R12x43plane420Unorm3pack16KHR = g12x4B12x4R12x43plane420Unorm3pack16
    public static let g12x4B12x4r12x42plane420Unorm3pack16KHR = g12x4B12x4r12x42plane420Unorm3pack16
    public static let g12x4B12x4R12x43plane422Unorm3pack16KHR = g12x4B12x4R12x43plane422Unorm3pack16
    public static let g12x4B12x4r12x42plane422Unorm3pack16KHR = g12x4B12x4r12x42plane422Unorm3pack16
    public static let g12x4B12x4R12x43plane444Unorm3pack16KHR = g12x4B12x4R12x43plane444Unorm3pack16
    public static let g16b16g16r16422UnormKHR = g16b16g16r16422Unorm
    public static let b16g16r16g16422UnormKHR = b16g16r16g16422Unorm
    public static let g16B16R163plane420UnormKHR = g16B16R163plane420Unorm
    public static let g16B16r162plane420UnormKHR = g16B16r162plane420Unorm
    public static let g16B16R163plane422UnormKHR = g16B16R163plane422Unorm
    public static let g16B16r162plane422UnormKHR = g16B16r162plane422Unorm
    public static let g16B16R163plane444UnormKHR = g16B16R163plane444Unorm
    
    var vulkanValue: VkFormat {
        get {
            return VkFormat(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFrontFace
public enum FrontFace: UInt32 {
    case counterClockwise = 0
    case clockwise = 1
    
    var vulkanValue: VkFrontFace {
        get {
            return VkFrontFace(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkGeometryTypeNV
public enum GeometryTypeNV: UInt32 {
    case trianglesNV = 0
    case aabbsNV = 1
    
    var vulkanValue: VkGeometryTypeNV {
        get {
            return VkGeometryTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageLayout
public enum ImageLayout: UInt32 {
    case undefined = 0
    case general = 1
    case colorAttachmentOptimal = 2
    case depthStencilAttachmentOptimal = 3
    case depthStencilReadOnlyOptimal = 4
    case shaderReadOnlyOptimal = 5
    case transferSrcOptimal = 6
    case transferDstOptimal = 7
    case preinitialized = 8
    case depthReadOnlyStencilAttachmentOptimal = 1000117000
    case depthAttachmentStencilReadOnlyOptimal = 1000117001
    case presentSrcKHR = 1000001002
    case sharedPresentKHR = 1000111000
    case shadingRateOptimalNV = 1000164003
    case fragmentDensityMapOptimalEXT = 1000218000
    
    public static let depthReadOnlyStencilAttachmentOptimalKHR = depthReadOnlyStencilAttachmentOptimal
    public static let depthAttachmentStencilReadOnlyOptimalKHR = depthAttachmentStencilReadOnlyOptimal
    
    var vulkanValue: VkImageLayout {
        get {
            return VkImageLayout(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageTiling
public enum ImageTiling: UInt32 {
    case optimal = 0
    case linear = 1
    case drmFormatModifierEXT = 1000158000
    
    var vulkanValue: VkImageTiling {
        get {
            return VkImageTiling(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageType
public enum ImageType: UInt32 {
    case imageType1d = 0
    case imageType2d = 1
    case imageType3d = 2
    
    var vulkanValue: VkImageType {
        get {
            return VkImageType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageViewType
public enum ImageViewType: UInt32 {
    case imageViewType1d = 0
    case imageViewType2d = 1
    case imageViewType3d = 2
    case imageViewTypeCube = 3
    case imageViewType1dArray = 4
    case imageViewType2dArray = 5
    case imageViewTypeCubeArray = 6
    
    var vulkanValue: VkImageViewType {
        get {
            return VkImageViewType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkIndexType
public enum IndexType: UInt32 {
    case uint16 = 0
    case uint32 = 1
    case noneNV = 1000165000
    case uint8EXT = 1000265000
    
    var vulkanValue: VkIndexType {
        get {
            return VkIndexType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkIndirectCommandsTokenTypeNVX
public enum IndirectCommandsTokenTypeNVX: UInt32 {
    case pipelineNVX = 0
    case descriptorSetNVX = 1
    case indexBufferNVX = 2
    case vertexBufferNVX = 3
    case pushConstantNVX = 4
    case drawIndexedNVX = 5
    case drawNVX = 6
    case dispatchNVX = 7
    
    var vulkanValue: VkIndirectCommandsTokenTypeNVX {
        get {
            return VkIndirectCommandsTokenTypeNVX(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkInternalAllocationType
public enum InternalAllocationType: UInt32 {
    case executable = 0
    
    var vulkanValue: VkInternalAllocationType {
        get {
            return VkInternalAllocationType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkLineRasterizationModeEXT
public enum LineRasterizationModeEXT: UInt32 {
    case defaultEXT = 0
    case rectangularEXT = 1
    case bresenhamEXT = 2
    case rectangularSmoothEXT = 3
    
    var vulkanValue: VkLineRasterizationModeEXT {
        get {
            return VkLineRasterizationModeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkLogicOp
public enum LogicOp: UInt32 {
    case clear = 0
    case and = 1
    case andReverse = 2
    case copy = 3
    case andInverted = 4
    case noOp = 5
    case xor = 6
    case or = 7
    case nor = 8
    case equivalent = 9
    case invert = 10
    case orReverse = 11
    case copyInverted = 12
    case orInverted = 13
    case nand = 14
    case set = 15
    
    var vulkanValue: VkLogicOp {
        get {
            return VkLogicOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryOverallocationBehaviorAMD
public enum MemoryOverallocationBehaviorAMD: UInt32 {
    case defaultAMD = 0
    case allowedAMD = 1
    case disallowedAMD = 2
    
    var vulkanValue: VkMemoryOverallocationBehaviorAMD {
        get {
            return VkMemoryOverallocationBehaviorAMD(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkObjectEntryTypeNVX
public enum ObjectEntryTypeNVX: UInt32 {
    case descriptorSetNVX = 0
    case pipelineNVX = 1
    case indexBufferNVX = 2
    case vertexBufferNVX = 3
    case pushConstantNVX = 4
    
    var vulkanValue: VkObjectEntryTypeNVX {
        get {
            return VkObjectEntryTypeNVX(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkObjectType
public enum ObjectType: UInt32 {
    case unknown = 0
    case instance = 1
    case physicalDevice = 2
    case device = 3
    case queue = 4
    case semaphore = 5
    case commandBuffer = 6
    case fence = 7
    case deviceMemory = 8
    case buffer = 9
    case image = 10
    case event = 11
    case queryPool = 12
    case bufferView = 13
    case imageView = 14
    case shaderModule = 15
    case pipelineCache = 16
    case pipelineLayout = 17
    case renderPass = 18
    case pipeline = 19
    case descriptorSetLayout = 20
    case sampler = 21
    case descriptorPool = 22
    case descriptorSet = 23
    case framebuffer = 24
    case commandPool = 25
    case samplerYcbcrConversion = 1000156000
    case descriptorUpdateTemplate = 1000085000
    case surfaceKHR = 1000000000
    case swapchainKHR = 1000001000
    case displayKHR = 1000002000
    case displayModeKHR = 1000002001
    case debugReportCallbackEXT = 1000011000
    case objectTableNVX = 1000086000
    case indirectCommandsLayoutNVX = 1000086001
    case debugUtilsMessengerEXT = 1000128000
    case validationCacheEXT = 1000160000
    case accelerationStructureNV = 1000165000
    case performanceConfigurationINTEL = 1000210000
    
    public static let descriptorUpdateTemplateKHR = descriptorUpdateTemplate
    public static let samplerYcbcrConversionKHR = samplerYcbcrConversion
    
    var vulkanValue: VkObjectType {
        get {
            return VkObjectType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPerformanceConfigurationTypeINTEL
public enum PerformanceConfigurationTypeINTEL: UInt32 {
    case commandQueueMetricsDiscoveryActivatedINTEL = 0
    
    var vulkanValue: VkPerformanceConfigurationTypeINTEL {
        get {
            return VkPerformanceConfigurationTypeINTEL(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPerformanceOverrideTypeINTEL
public enum PerformanceOverrideTypeINTEL: UInt32 {
    case nullHardwareINTEL = 0
    case flushGpuCachesINTEL = 1
    
    var vulkanValue: VkPerformanceOverrideTypeINTEL {
        get {
            return VkPerformanceOverrideTypeINTEL(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPerformanceParameterTypeINTEL
public enum PerformanceParameterTypeINTEL: UInt32 {
    case hwCountersSupportedINTEL = 0
    case streamMarkerValidBitsINTEL = 1
    
    var vulkanValue: VkPerformanceParameterTypeINTEL {
        get {
            return VkPerformanceParameterTypeINTEL(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPerformanceValueTypeINTEL
public enum PerformanceValueTypeINTEL: UInt32 {
    case uint32INTEL = 0
    case uint64INTEL = 1
    case floatINTEL = 2
    case boolINTEL = 3
    case stringINTEL = 4
    
    var vulkanValue: VkPerformanceValueTypeINTEL {
        get {
            return VkPerformanceValueTypeINTEL(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPhysicalDeviceType
public enum PhysicalDeviceType: UInt32 {
    case other = 0
    case integratedGpu = 1
    case discreteGpu = 2
    case virtualGpu = 3
    case cpu = 4
    
    var vulkanValue: VkPhysicalDeviceType {
        get {
            return VkPhysicalDeviceType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineBindPoint
public enum PipelineBindPoint: UInt32 {
    case graphics = 0
    case compute = 1
    case rayTracingNV = 1000165000
    
    var vulkanValue: VkPipelineBindPoint {
        get {
            return VkPipelineBindPoint(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCacheHeaderVersion
public enum PipelineCacheHeaderVersion: UInt32 {
    case one = 1
    
    var vulkanValue: VkPipelineCacheHeaderVersion {
        get {
            return VkPipelineCacheHeaderVersion(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineExecutableStatisticFormatKHR
public enum PipelineExecutableStatisticFormatKHR: UInt32 {
    case bool32KHR = 0
    case int64KHR = 1
    case uint64KHR = 2
    case float64KHR = 3
    
    var vulkanValue: VkPipelineExecutableStatisticFormatKHR {
        get {
            return VkPipelineExecutableStatisticFormatKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPointClippingBehavior
public enum PointClippingBehavior: UInt32 {
    case allClipPlanes = 0
    case userClipPlanesOnly = 1
    
    public static let allClipPlanesKHR = allClipPlanes
    public static let userClipPlanesOnlyKHR = userClipPlanesOnly
    
    var vulkanValue: VkPointClippingBehavior {
        get {
            return VkPointClippingBehavior(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPolygonMode
public enum PolygonMode: UInt32 {
    case fill = 0
    case line = 1
    case point = 2
    case fillRectangleNV = 1000153000
    
    var vulkanValue: VkPolygonMode {
        get {
            return VkPolygonMode(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPresentModeKHR
public enum PresentModeKHR: UInt32 {
    case immediateKHR = 0
    case mailboxKHR = 1
    case fifoKHR = 2
    case fifoRelaxedKHR = 3
    case sharedDemandRefreshKHR = 1000111000
    case sharedContinuousRefreshKHR = 1000111001
    
    var vulkanValue: VkPresentModeKHR {
        get {
            return VkPresentModeKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPrimitiveTopology
public enum PrimitiveTopology: UInt32 {
    case pointList = 0
    case lineList = 1
    case lineStrip = 2
    case triangleList = 3
    case triangleStrip = 4
    case triangleFan = 5
    case lineListWithAdjacency = 6
    case lineStripWithAdjacency = 7
    case triangleListWithAdjacency = 8
    case triangleStripWithAdjacency = 9
    case patchList = 10
    
    var vulkanValue: VkPrimitiveTopology {
        get {
            return VkPrimitiveTopology(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryPoolSamplingModeINTEL
public enum QueryPoolSamplingModeINTEL: UInt32 {
    case manualINTEL = 0
    
    var vulkanValue: VkQueryPoolSamplingModeINTEL {
        get {
            return VkQueryPoolSamplingModeINTEL(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryType
public enum QueryType: UInt32 {
    case occlusion = 0
    case pipelineStatistics = 1
    case timestamp = 2
    case transformFeedbackStreamEXT = 1000028004
    case accelerationStructureCompactedSizeNV = 1000165000
    case performanceQueryINTEL = 1000210000
    
    var vulkanValue: VkQueryType {
        get {
            return VkQueryType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueueGlobalPriorityEXT
public enum QueueGlobalPriorityEXT: UInt32 {
    case lowEXT = 128
    case mediumEXT = 256
    case highEXT = 512
    case realtimeEXT = 1024
    
    var vulkanValue: VkQueueGlobalPriorityEXT {
        get {
            return VkQueueGlobalPriorityEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkRasterizationOrderAMD
public enum RasterizationOrderAMD: UInt32 {
    case strictAMD = 0
    case relaxedAMD = 1
    
    var vulkanValue: VkRasterizationOrderAMD {
        get {
            return VkRasterizationOrderAMD(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkRayTracingShaderGroupTypeNV
public enum RayTracingShaderGroupTypeNV: UInt32 {
    case generalNV = 0
    case trianglesHitGroupNV = 1
    case proceduralHitGroupNV = 2
    
    var vulkanValue: VkRayTracingShaderGroupTypeNV {
        get {
            return VkRayTracingShaderGroupTypeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerAddressMode
public enum SamplerAddressMode: UInt32 {
    case `repeat` = 0
    case mirroredRepeat = 1
    case clampToEdge = 2
    case clampToBorder = 3
    case mirrorClampToEdge = 1000014000
    
    public static let mirrorClampToEdgeKHR = mirrorClampToEdge
    
    var vulkanValue: VkSamplerAddressMode {
        get {
            return VkSamplerAddressMode(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerMipmapMode
public enum SamplerMipmapMode: UInt32 {
    case nearest = 0
    case linear = 1
    
    var vulkanValue: VkSamplerMipmapMode {
        get {
            return VkSamplerMipmapMode(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerReductionModeEXT
public enum SamplerReductionModeEXT: UInt32 {
    case weightedAverageEXT = 0
    case minEXT = 1
    case maxEXT = 2
    
    var vulkanValue: VkSamplerReductionModeEXT {
        get {
            return VkSamplerReductionModeEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerYcbcrModelConversion
public enum SamplerYcbcrModelConversion: UInt32 {
    case rgbIdentity = 0
    case ycbcrIdentity = 1
    case ycbcr709 = 2
    case ycbcr601 = 3
    case ycbcr2020 = 4
    
    public static let rgbIdentityKHR = rgbIdentity
    public static let ycbcrIdentityKHR = ycbcrIdentity
    public static let ycbcr709KHR = ycbcr709
    public static let ycbcr601KHR = ycbcr601
    public static let ycbcr2020KHR = ycbcr2020
    
    var vulkanValue: VkSamplerYcbcrModelConversion {
        get {
            return VkSamplerYcbcrModelConversion(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerYcbcrRange
public enum SamplerYcbcrRange: UInt32 {
    case ituFull = 0
    case ituNarrow = 1
    
    public static let ituFullKHR = ituFull
    public static let ituNarrowKHR = ituNarrow
    
    var vulkanValue: VkSamplerYcbcrRange {
        get {
            return VkSamplerYcbcrRange(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkScopeNV
public enum ScopeNV: UInt32 {
    case deviceNV = 1
    case workgroupNV = 2
    case subgroupNV = 3
    case queueFamilyNV = 5
    
    var vulkanValue: VkScopeNV {
        get {
            return VkScopeNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShaderFloatControlsIndependenceKHR
public enum ShaderFloatControlsIndependenceKHR: UInt32 {
    case shaderFloatControlsIndependenceKHR32BitOnlyKHR = 0
    case shaderFloatControlsIndependenceKHRAllKHR = 1
    case shaderFloatControlsIndependenceKHRNoneKHR = 2
    
    var vulkanValue: VkShaderFloatControlsIndependenceKHR {
        get {
            return VkShaderFloatControlsIndependenceKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShaderInfoTypeAMD
public enum ShaderInfoTypeAMD: UInt32 {
    case statisticsAMD = 0
    case binaryAMD = 1
    case disassemblyAMD = 2
    
    var vulkanValue: VkShaderInfoTypeAMD {
        get {
            return VkShaderInfoTypeAMD(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShadingRatePaletteEntryNV
public enum ShadingRatePaletteEntryNV: UInt32 {
    case shadingRatePaletteEntryNVNoInvocationsNV = 0
    case shadingRatePaletteEntryNV16InvocationsPerPixelNV = 1
    case shadingRatePaletteEntryNV8InvocationsPerPixelNV = 2
    case shadingRatePaletteEntryNV4InvocationsPerPixelNV = 3
    case shadingRatePaletteEntryNV2InvocationsPerPixelNV = 4
    case shadingRatePaletteEntryNV1InvocationPerPixelNV = 5
    case shadingRatePaletteEntryNV1InvocationPer2x1PixelsNV = 6
    case shadingRatePaletteEntryNV1InvocationPer1x2PixelsNV = 7
    case shadingRatePaletteEntryNV1InvocationPer2x2PixelsNV = 8
    case shadingRatePaletteEntryNV1InvocationPer4x2PixelsNV = 9
    case shadingRatePaletteEntryNV1InvocationPer2x4PixelsNV = 10
    case shadingRatePaletteEntryNV1InvocationPer4x4PixelsNV = 11
    
    var vulkanValue: VkShadingRatePaletteEntryNV {
        get {
            return VkShadingRatePaletteEntryNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSharingMode
public enum SharingMode: UInt32 {
    case exclusive = 0
    case concurrent = 1
    
    var vulkanValue: VkSharingMode {
        get {
            return VkSharingMode(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkStencilOp
public enum StencilOp: UInt32 {
    case keep = 0
    case zero = 1
    case replace = 2
    case incrementAndClamp = 3
    case decrementAndClamp = 4
    case invert = 5
    case incrementAndWrap = 6
    case decrementAndWrap = 7
    
    var vulkanValue: VkStencilOp {
        get {
            return VkStencilOp(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkStructureType
public enum StructureType: UInt32 {
    case applicationInfo = 0
    case instanceCreateInfo = 1
    case deviceQueueCreateInfo = 2
    case deviceCreateInfo = 3
    case submitInfo = 4
    case memoryAllocateInfo = 5
    case mappedMemoryRange = 6
    case bindSparseInfo = 7
    case fenceCreateInfo = 8
    case semaphoreCreateInfo = 9
    case eventCreateInfo = 10
    case queryPoolCreateInfo = 11
    case bufferCreateInfo = 12
    case bufferViewCreateInfo = 13
    case imageCreateInfo = 14
    case imageViewCreateInfo = 15
    case shaderModuleCreateInfo = 16
    case pipelineCacheCreateInfo = 17
    case pipelineShaderStageCreateInfo = 18
    case pipelineVertexInputStateCreateInfo = 19
    case pipelineInputAssemblyStateCreateInfo = 20
    case pipelineTessellationStateCreateInfo = 21
    case pipelineViewportStateCreateInfo = 22
    case pipelineRasterizationStateCreateInfo = 23
    case pipelineMultisampleStateCreateInfo = 24
    case pipelineDepthStencilStateCreateInfo = 25
    case pipelineColorBlendStateCreateInfo = 26
    case pipelineDynamicStateCreateInfo = 27
    case graphicsPipelineCreateInfo = 28
    case computePipelineCreateInfo = 29
    case pipelineLayoutCreateInfo = 30
    case samplerCreateInfo = 31
    case descriptorSetLayoutCreateInfo = 32
    case descriptorPoolCreateInfo = 33
    case descriptorSetAllocateInfo = 34
    case writeDescriptorSet = 35
    case copyDescriptorSet = 36
    case framebufferCreateInfo = 37
    case renderPassCreateInfo = 38
    case commandPoolCreateInfo = 39
    case commandBufferAllocateInfo = 40
    case commandBufferInheritanceInfo = 41
    case commandBufferBeginInfo = 42
    case renderPassBeginInfo = 43
    case bufferMemoryBarrier = 44
    case imageMemoryBarrier = 45
    case memoryBarrier = 46
    case loaderInstanceCreateInfo = 47
    case loaderDeviceCreateInfo = 48
    case physicalDeviceSubgroupProperties = 1000094000
    case bindBufferMemoryInfo = 1000157000
    case bindImageMemoryInfo = 1000157001
    case physicalDevice16bitStorageFeatures = 1000083000
    case memoryDedicatedRequirements = 1000127000
    case memoryDedicatedAllocateInfo = 1000127001
    case memoryAllocateFlagsInfo = 1000060000
    case deviceGroupRenderPassBeginInfo = 1000060003
    case deviceGroupCommandBufferBeginInfo = 1000060004
    case deviceGroupSubmitInfo = 1000060005
    case deviceGroupBindSparseInfo = 1000060006
    case bindBufferMemoryDeviceGroupInfo = 1000060013
    case bindImageMemoryDeviceGroupInfo = 1000060014
    case physicalDeviceGroupProperties = 1000070000
    case deviceGroupDeviceCreateInfo = 1000070001
    case bufferMemoryRequirementsInfo2 = 1000146000
    case imageMemoryRequirementsInfo2 = 1000146001
    case imageSparseMemoryRequirementsInfo2 = 1000146002
    case memoryRequirements2 = 1000146003
    case sparseImageMemoryRequirements2 = 1000146004
    case physicalDeviceFeatures2 = 1000059000
    case physicalDeviceProperties2 = 1000059001
    case formatProperties2 = 1000059002
    case imageFormatProperties2 = 1000059003
    case physicalDeviceImageFormatInfo2 = 1000059004
    case queueFamilyProperties2 = 1000059005
    case physicalDeviceMemoryProperties2 = 1000059006
    case sparseImageFormatProperties2 = 1000059007
    case physicalDeviceSparseImageFormatInfo2 = 1000059008
    case physicalDevicePointClippingProperties = 1000117000
    case renderPassInputAttachmentAspectCreateInfo = 1000117001
    case imageViewUsageCreateInfo = 1000117002
    case pipelineTessellationDomainOriginStateCreateInfo = 1000117003
    case renderPassMultiviewCreateInfo = 1000053000
    case physicalDeviceMultiviewFeatures = 1000053001
    case physicalDeviceMultiviewProperties = 1000053002
    case physicalDeviceVariablePointersFeatures = 1000120000
    case protectedSubmitInfo = 1000145000
    case physicalDeviceProtectedMemoryFeatures = 1000145001
    case physicalDeviceProtectedMemoryProperties = 1000145002
    case deviceQueueInfo2 = 1000145003
    case samplerYcbcrConversionCreateInfo = 1000156000
    case samplerYcbcrConversionInfo = 1000156001
    case bindImagePlaneMemoryInfo = 1000156002
    case imagePlaneMemoryRequirementsInfo = 1000156003
    case physicalDeviceSamplerYcbcrConversionFeatures = 1000156004
    case samplerYcbcrConversionImageFormatProperties = 1000156005
    case descriptorUpdateTemplateCreateInfo = 1000085000
    case physicalDeviceExternalImageFormatInfo = 1000071000
    case externalImageFormatProperties = 1000071001
    case physicalDeviceExternalBufferInfo = 1000071002
    case externalBufferProperties = 1000071003
    case physicalDeviceIdProperties = 1000071004
    case externalMemoryBufferCreateInfo = 1000072000
    case externalMemoryImageCreateInfo = 1000072001
    case exportMemoryAllocateInfo = 1000072002
    case physicalDeviceExternalFenceInfo = 1000112000
    case externalFenceProperties = 1000112001
    case exportFenceCreateInfo = 1000113000
    case exportSemaphoreCreateInfo = 1000077000
    case physicalDeviceExternalSemaphoreInfo = 1000076000
    case externalSemaphoreProperties = 1000076001
    case physicalDeviceMaintenance3Properties = 1000168000
    case descriptorSetLayoutSupport = 1000168001
    case physicalDeviceShaderDrawParametersFeatures = 1000063000
    case swapchainCreateInfoKHR = 1000001000
    case presentInfoKHR = 1000001001
    case deviceGroupPresentCapabilitiesKHR = 1000060007
    case imageSwapchainCreateInfoKHR = 1000060008
    case bindImageMemorySwapchainInfoKHR = 1000060009
    case acquireNextImageInfoKHR = 1000060010
    case deviceGroupPresentInfoKHR = 1000060011
    case deviceGroupSwapchainCreateInfoKHR = 1000060012
    case displayModeCreateInfoKHR = 1000002000
    case displaySurfaceCreateInfoKHR = 1000002001
    case displayPresentInfoKHR = 1000003000
    case debugReportCallbackCreateInfoEXT = 1000011000
    case pipelineRasterizationStateRasterizationOrderAMD = 1000018000
    case debugMarkerObjectNameInfoEXT = 1000022000
    case debugMarkerObjectTagInfoEXT = 1000022001
    case debugMarkerMarkerInfoEXT = 1000022002
    case dedicatedAllocationImageCreateInfoNV = 1000026000
    case dedicatedAllocationBufferCreateInfoNV = 1000026001
    case dedicatedAllocationMemoryAllocateInfoNV = 1000026002
    case physicalDeviceTransformFeedbackFeaturesEXT = 1000028000
    case physicalDeviceTransformFeedbackPropertiesEXT = 1000028001
    case pipelineRasterizationStateStreamCreateInfoEXT = 1000028002
    case imageViewHandleInfoNVX = 1000030000
    case textureLodGatherFormatPropertiesAMD = 1000041000
    case physicalDeviceCornerSampledImageFeaturesNV = 1000050000
    case externalMemoryImageCreateInfoNV = 1000056000
    case exportMemoryAllocateInfoNV = 1000056001
    case validationFlagsEXT = 1000061000
    case physicalDeviceTextureCompressionAstcHdrFeaturesEXT = 1000066000
    case imageViewAstcDecodeModeEXT = 1000067000
    case physicalDeviceAstcDecodeFeaturesEXT = 1000067001
    case importMemoryFdInfoKHR = 1000074000
    case memoryFdPropertiesKHR = 1000074001
    case memoryGetFdInfoKHR = 1000074002
    case importSemaphoreFdInfoKHR = 1000079000
    case semaphoreGetFdInfoKHR = 1000079001
    case physicalDevicePushDescriptorPropertiesKHR = 1000080000
    case commandBufferInheritanceConditionalRenderingInfoEXT = 1000081000
    case physicalDeviceConditionalRenderingFeaturesEXT = 1000081001
    case conditionalRenderingBeginInfoEXT = 1000081002
    case physicalDeviceShaderFloat16Int8FeaturesKHR = 1000082000
    case presentRegionsKHR = 1000084000
    case objectTableCreateInfoNVX = 1000086000
    case indirectCommandsLayoutCreateInfoNVX = 1000086001
    case cmdProcessCommandsInfoNVX = 1000086002
    case cmdReserveSpaceForCommandsInfoNVX = 1000086003
    case deviceGeneratedCommandsLimitsNVX = 1000086004
    case deviceGeneratedCommandsFeaturesNVX = 1000086005
    case pipelineViewportWScalingStateCreateInfoNV = 1000087000
    case surfaceCapabilities2EXT = 1000090000
    case displayPowerInfoEXT = 1000091000
    case deviceEventInfoEXT = 1000091001
    case displayEventInfoEXT = 1000091002
    case swapchainCounterCreateInfoEXT = 1000091003
    case presentTimesInfoGOOGLE = 1000092000
    case physicalDeviceMultiviewPerViewAttributesPropertiesNVX = 1000097000
    case pipelineViewportSwizzleStateCreateInfoNV = 1000098000
    case physicalDeviceDiscardRectanglePropertiesEXT = 1000099000
    case pipelineDiscardRectangleStateCreateInfoEXT = 1000099001
    case physicalDeviceConservativeRasterizationPropertiesEXT = 1000101000
    case pipelineRasterizationConservativeStateCreateInfoEXT = 1000101001
    case physicalDeviceDepthClipEnableFeaturesEXT = 1000102000
    case pipelineRasterizationDepthClipStateCreateInfoEXT = 1000102001
    case hdrMetadataEXT = 1000105000
    case physicalDeviceImagelessFramebufferFeaturesKHR = 1000108000
    case framebufferAttachmentsCreateInfoKHR = 1000108001
    case framebufferAttachmentImageInfoKHR = 1000108002
    case renderPassAttachmentBeginInfoKHR = 1000108003
    case attachmentDescription2KHR = 1000109000
    case attachmentReference2KHR = 1000109001
    case subpassDescription2KHR = 1000109002
    case subpassDependency2KHR = 1000109003
    case renderPassCreateInfo2KHR = 1000109004
    case subpassBeginInfoKHR = 1000109005
    case subpassEndInfoKHR = 1000109006
    case sharedPresentSurfaceCapabilitiesKHR = 1000111000
    case importFenceFdInfoKHR = 1000115000
    case fenceGetFdInfoKHR = 1000115001
    case physicalDeviceSurfaceInfo2KHR = 1000119000
    case surfaceCapabilities2KHR = 1000119001
    case surfaceFormat2KHR = 1000119002
    case displayProperties2KHR = 1000121000
    case displayPlaneProperties2KHR = 1000121001
    case displayModeProperties2KHR = 1000121002
    case displayPlaneInfo2KHR = 1000121003
    case displayPlaneCapabilities2KHR = 1000121004
    case debugUtilsObjectNameInfoEXT = 1000128000
    case debugUtilsObjectTagInfoEXT = 1000128001
    case debugUtilsLabelEXT = 1000128002
    case debugUtilsMessengerCallbackDataEXT = 1000128003
    case debugUtilsMessengerCreateInfoEXT = 1000128004
    case physicalDeviceSamplerFilterMinmaxPropertiesEXT = 1000130000
    case samplerReductionModeCreateInfoEXT = 1000130001
    case physicalDeviceInlineUniformBlockFeaturesEXT = 1000138000
    case physicalDeviceInlineUniformBlockPropertiesEXT = 1000138001
    case writeDescriptorSetInlineUniformBlockEXT = 1000138002
    case descriptorPoolInlineUniformBlockCreateInfoEXT = 1000138003
    case sampleLocationsInfoEXT = 1000143000
    case renderPassSampleLocationsBeginInfoEXT = 1000143001
    case pipelineSampleLocationsStateCreateInfoEXT = 1000143002
    case physicalDeviceSampleLocationsPropertiesEXT = 1000143003
    case multisamplePropertiesEXT = 1000143004
    case imageFormatListCreateInfoKHR = 1000147000
    case physicalDeviceBlendOperationAdvancedFeaturesEXT = 1000148000
    case physicalDeviceBlendOperationAdvancedPropertiesEXT = 1000148001
    case pipelineColorBlendAdvancedStateCreateInfoEXT = 1000148002
    case pipelineCoverageToColorStateCreateInfoNV = 1000149000
    case pipelineCoverageModulationStateCreateInfoNV = 1000152000
    case physicalDeviceShaderSmBuiltinsFeaturesNV = 1000154000
    case physicalDeviceShaderSmBuiltinsPropertiesNV = 1000154001
    case drmFormatModifierPropertiesListEXT = 1000158000
    case drmFormatModifierPropertiesEXT = 1000158001
    case physicalDeviceImageDrmFormatModifierInfoEXT = 1000158002
    case imageDrmFormatModifierListCreateInfoEXT = 1000158003
    case imageDrmFormatModifierExplicitCreateInfoEXT = 1000158004
    case imageDrmFormatModifierPropertiesEXT = 1000158005
    case validationCacheCreateInfoEXT = 1000160000
    case shaderModuleValidationCacheCreateInfoEXT = 1000160001
    case descriptorSetLayoutBindingFlagsCreateInfoEXT = 1000161000
    case physicalDeviceDescriptorIndexingFeaturesEXT = 1000161001
    case physicalDeviceDescriptorIndexingPropertiesEXT = 1000161002
    case descriptorSetVariableDescriptorCountAllocateInfoEXT = 1000161003
    case descriptorSetVariableDescriptorCountLayoutSupportEXT = 1000161004
    case pipelineViewportShadingRateImageStateCreateInfoNV = 1000164000
    case physicalDeviceShadingRateImageFeaturesNV = 1000164001
    case physicalDeviceShadingRateImagePropertiesNV = 1000164002
    case pipelineViewportCoarseSampleOrderStateCreateInfoNV = 1000164005
    case rayTracingPipelineCreateInfoNV = 1000165000
    case accelerationStructureCreateInfoNV = 1000165001
    case geometryNV = 1000165003
    case geometryTrianglesNV = 1000165004
    case geometryAabbNV = 1000165005
    case bindAccelerationStructureMemoryInfoNV = 1000165006
    case writeDescriptorSetAccelerationStructureNV = 1000165007
    case accelerationStructureMemoryRequirementsInfoNV = 1000165008
    case physicalDeviceRayTracingPropertiesNV = 1000165009
    case rayTracingShaderGroupCreateInfoNV = 1000165011
    case accelerationStructureInfoNV = 1000165012
    case physicalDeviceRepresentativeFragmentTestFeaturesNV = 1000166000
    case pipelineRepresentativeFragmentTestStateCreateInfoNV = 1000166001
    case physicalDeviceImageViewImageFormatInfoEXT = 1000170000
    case filterCubicImageViewImageFormatPropertiesEXT = 1000170001
    case deviceQueueGlobalPriorityCreateInfoEXT = 1000174000
    case physicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = 1000175000
    case physicalDevice8bitStorageFeaturesKHR = 1000177000
    case importMemoryHostPointerInfoEXT = 1000178000
    case memoryHostPointerPropertiesEXT = 1000178001
    case physicalDeviceernalMemoryHostPropertiesEXT = 1000178002
    case physicalDeviceShaderAtomicInt64FeaturesKHR = 1000180000
    case pipelineCompilerControlCreateInfoAMD = 1000183000
    case calibratedTimestampInfoEXT = 1000184000
    case physicalDeviceShaderCorePropertiesAMD = 1000185000
    case deviceMemoryOverallocationCreateInfoAMD = 1000189000
    case physicalDeviceVertexAttributeDivisorPropertiesEXT = 1000190000
    case pipelineVertexInputDivisorStateCreateInfoEXT = 1000190001
    case physicalDeviceVertexAttributeDivisorFeaturesEXT = 1000190002
    case pipelineCreationFeedbackCreateInfoEXT = 1000192000
    case physicalDeviceDriverPropertiesKHR = 1000196000
    case physicalDeviceFloatControlsPropertiesKHR = 1000197000
    case physicalDeviceDepthStencilResolvePropertiesKHR = 1000199000
    case subpassDescriptionDepthStencilResolveKHR = 1000199001
    case physicalDeviceComputeShaderDerivativesFeaturesNV = 1000201000
    case physicalDeviceMeshShaderFeaturesNV = 1000202000
    case physicalDeviceMeshShaderPropertiesNV = 1000202001
    case physicalDeviceFragmentShaderBarycentricFeaturesNV = 1000203000
    case physicalDeviceShaderImageFootprintFeaturesNV = 1000204000
    case pipelineViewportExclusiveScissorStateCreateInfoNV = 1000205000
    case physicalDeviceExclusiveScissorFeaturesNV = 1000205002
    case checkpointDataNV = 1000206000
    case queueFamilyCheckpointPropertiesNV = 1000206001
    case physicalDeviceShaderIntegerFunctions2FeaturesINTEL = 1000209000
    case queryPoolCreateInfoINTEL = 1000210000
    case initializePerformanceApiInfoINTEL = 1000210001
    case performanceMarkerInfoINTEL = 1000210002
    case performanceStreamMarkerInfoINTEL = 1000210003
    case performanceOverrideInfoINTEL = 1000210004
    case performanceConfigurationAcquireInfoINTEL = 1000210005
    case physicalDeviceVulkanMemoryModelFeaturesKHR = 1000211000
    case physicalDevicePciBusInfoPropertiesEXT = 1000212000
    case displayNativeHdrSurfaceCapabilitiesAMD = 1000213000
    case swapchainDisplayNativeHdrCreateInfoAMD = 1000213001
    case physicalDeviceFragmentDensityMapFeaturesEXT = 1000218000
    case physicalDeviceFragmentDensityMapPropertiesEXT = 1000218001
    case renderPassFragmentDensityMapCreateInfoEXT = 1000218002
    case physicalDeviceScalarBlockLayoutFeaturesEXT = 1000221000
    case physicalDeviceSubgroupSizeControlPropertiesEXT = 1000225000
    case pipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = 1000225001
    case physicalDeviceSubgroupSizeControlFeaturesEXT = 1000225002
    case physicalDeviceShaderCoreProperties2AMD = 1000227000
    case physicalDeviceCoherentMemoryFeaturesAMD = 1000229000
    case physicalDeviceMemoryBudgetPropertiesEXT = 1000237000
    case physicalDeviceMemoryPriorityFeaturesEXT = 1000238000
    case memoryPriorityAllocateInfoEXT = 1000238001
    case surfaceProtectedCapabilitiesKHR = 1000239000
    case physicalDeviceDedicatedAllocationImageAliasingFeaturesNV = 1000240000
    case physicalDeviceBufferDeviceAddressFeaturesEXT = 1000244000
    case bufferDeviceAddressInfoEXT = 1000244001
    case bufferDeviceAddressCreateInfoEXT = 1000244002
    case imageStencilUsageCreateInfoEXT = 1000246000
    case validationFeaturesEXT = 1000247000
    case physicalDeviceCooperativeMatrixFeaturesNV = 1000249000
    case cooperativeMatrixPropertiesNV = 1000249001
    case physicalDeviceCooperativeMatrixPropertiesNV = 1000249002
    case physicalDeviceCoverageReductionModeFeaturesNV = 1000250000
    case pipelineCoverageReductionStateCreateInfoNV = 1000250001
    case framebufferMixedSamplesCombinationNV = 1000250002
    case physicalDeviceFragmentShaderInterlockFeaturesEXT = 1000251000
    case physicalDeviceYcbcrImageArraysFeaturesEXT = 1000252000
    case physicalDeviceUniformBufferStandardLayoutFeaturesKHR = 1000253000
    case headlessSurfaceCreateInfoEXT = 1000256000
    case physicalDeviceLineRasterizationFeaturesEXT = 1000259000
    case pipelineRasterizationLineStateCreateInfoEXT = 1000259001
    case physicalDeviceLineRasterizationPropertiesEXT = 1000259002
    case physicalDeviceHostQueryResetFeaturesEXT = 1000261000
    case physicalDeviceIndexTypeUint8FeaturesEXT = 1000265000
    case physicalDevicePipelineExecutablePropertiesFeaturesKHR = 1000269000
    case pipelineInfoKHR = 1000269001
    case pipelineExecutablePropertiesKHR = 1000269002
    case pipelineExecutableInfoKHR = 1000269003
    case pipelineExecutableStatisticKHR = 1000269004
    case pipelineExecutableInternalRepresentationKHR = 1000269005
    case physicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = 1000276000
    case physicalDeviceTexelBufferAlignmentFeaturesEXT = 1000281000
    case physicalDeviceTexelBufferAlignmentPropertiesEXT = 1000281001
    
    public static let physicalDeviceVariablePointerFeatures = physicalDeviceVariablePointersFeatures
    public static let physicalDeviceShaderDrawParameterFeatures = physicalDeviceShaderDrawParametersFeatures
    public static let debugReportCreateInfoEXT = debugReportCallbackCreateInfoEXT
    public static let renderPassMultiviewCreateInfoKHR = renderPassMultiviewCreateInfo
    public static let physicalDeviceMultiviewFeaturesKHR = physicalDeviceMultiviewFeatures
    public static let physicalDeviceMultiviewPropertiesKHR = physicalDeviceMultiviewProperties
    public static let physicalDeviceFeatures2KHR = physicalDeviceFeatures2
    public static let physicalDeviceProperties2KHR = physicalDeviceProperties2
    public static let formatProperties2KHR = formatProperties2
    public static let imageFormatProperties2KHR = imageFormatProperties2
    public static let physicalDeviceImageFormatInfo2KHR = physicalDeviceImageFormatInfo2
    public static let queueFamilyProperties2KHR = queueFamilyProperties2
    public static let physicalDeviceMemoryProperties2KHR = physicalDeviceMemoryProperties2
    public static let sparseImageFormatProperties2KHR = sparseImageFormatProperties2
    public static let physicalDeviceSparseImageFormatInfo2KHR = physicalDeviceSparseImageFormatInfo2
    public static let memoryAllocateFlagsInfoKHR = memoryAllocateFlagsInfo
    public static let deviceGroupRenderPassBeginInfoKHR = deviceGroupRenderPassBeginInfo
    public static let deviceGroupCommandBufferBeginInfoKHR = deviceGroupCommandBufferBeginInfo
    public static let deviceGroupSubmitInfoKHR = deviceGroupSubmitInfo
    public static let deviceGroupBindSparseInfoKHR = deviceGroupBindSparseInfo
    public static let bindBufferMemoryDeviceGroupInfoKHR = bindBufferMemoryDeviceGroupInfo
    public static let bindImageMemoryDeviceGroupInfoKHR = bindImageMemoryDeviceGroupInfo
    public static let physicalDeviceGroupPropertiesKHR = physicalDeviceGroupProperties
    public static let deviceGroupDeviceCreateInfoKHR = deviceGroupDeviceCreateInfo
    public static let physicalDeviceExternalImageFormatInfoKHR = physicalDeviceExternalImageFormatInfo
    public static let externalImageFormatPropertiesKHR = externalImageFormatProperties
    public static let physicalDeviceExternalBufferInfoKHR = physicalDeviceExternalBufferInfo
    public static let externalBufferPropertiesKHR = externalBufferProperties
    public static let physicalDeviceIdPropertiesKHR = physicalDeviceIdProperties
    public static let externalMemoryBufferCreateInfoKHR = externalMemoryBufferCreateInfo
    public static let externalMemoryImageCreateInfoKHR = externalMemoryImageCreateInfo
    public static let exportMemoryAllocateInfoKHR = exportMemoryAllocateInfo
    public static let physicalDeviceExternalSemaphoreInfoKHR = physicalDeviceExternalSemaphoreInfo
    public static let externalSemaphorePropertiesKHR = externalSemaphoreProperties
    public static let exportSemaphoreCreateInfoKHR = exportSemaphoreCreateInfo
    public static let physicalDeviceFloat16Int8FeaturesKHR = physicalDeviceShaderFloat16Int8FeaturesKHR
    public static let physicalDevice16bitStorageFeaturesKHR = physicalDevice16bitStorageFeatures
    public static let descriptorUpdateTemplateCreateInfoKHR = descriptorUpdateTemplateCreateInfo
    public static let physicalDeviceExternalFenceInfoKHR = physicalDeviceExternalFenceInfo
    public static let externalFencePropertiesKHR = externalFenceProperties
    public static let exportFenceCreateInfoKHR = exportFenceCreateInfo
    public static let physicalDevicePointClippingPropertiesKHR = physicalDevicePointClippingProperties
    public static let renderPassInputAttachmentAspectCreateInfoKHR = renderPassInputAttachmentAspectCreateInfo
    public static let imageViewUsageCreateInfoKHR = imageViewUsageCreateInfo
    public static let pipelineTessellationDomainOriginStateCreateInfoKHR = pipelineTessellationDomainOriginStateCreateInfo
    public static let physicalDeviceVariablePointerFeaturesKHR = physicalDeviceVariablePointerFeatures
    public static let physicalDeviceVariablePointersFeaturesKHR = physicalDeviceVariablePointerFeatures
    public static let memoryDedicatedRequirementsKHR = memoryDedicatedRequirements
    public static let memoryDedicatedAllocateInfoKHR = memoryDedicatedAllocateInfo
    public static let bufferMemoryRequirementsInfo2KHR = bufferMemoryRequirementsInfo2
    public static let imageMemoryRequirementsInfo2KHR = imageMemoryRequirementsInfo2
    public static let imageSparseMemoryRequirementsInfo2KHR = imageSparseMemoryRequirementsInfo2
    public static let memoryRequirements2KHR = memoryRequirements2
    public static let sparseImageMemoryRequirements2KHR = sparseImageMemoryRequirements2
    public static let samplerYcbcrConversionCreateInfoKHR = samplerYcbcrConversionCreateInfo
    public static let samplerYcbcrConversionInfoKHR = samplerYcbcrConversionInfo
    public static let bindImagePlaneMemoryInfoKHR = bindImagePlaneMemoryInfo
    public static let imagePlaneMemoryRequirementsInfoKHR = imagePlaneMemoryRequirementsInfo
    public static let physicalDeviceSamplerYcbcrConversionFeaturesKHR = physicalDeviceSamplerYcbcrConversionFeatures
    public static let samplerYcbcrConversionImageFormatPropertiesKHR = samplerYcbcrConversionImageFormatProperties
    public static let bindBufferMemoryInfoKHR = bindBufferMemoryInfo
    public static let bindImageMemoryInfoKHR = bindImageMemoryInfo
    public static let physicalDeviceMaintenance3PropertiesKHR = physicalDeviceMaintenance3Properties
    public static let descriptorSetLayoutSupportKHR = descriptorSetLayoutSupport
    public static let physicalDeviceBufferAddressFeaturesEXT = physicalDeviceBufferDeviceAddressFeaturesEXT
    
    var vulkanValue: VkStructureType {
        get {
            return VkStructureType(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSubpassContents
public enum SubpassContents: UInt32 {
    case inline = 0
    case secondaryCommandBuffers = 1
    
    var vulkanValue: VkSubpassContents {
        get {
            return VkSubpassContents(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSystemAllocationScope
public enum SystemAllocationScope: UInt32 {
    case command = 0
    case object = 1
    case cache = 2
    case device = 3
    case instance = 4
    
    var vulkanValue: VkSystemAllocationScope {
        get {
            return VkSystemAllocationScope(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkTessellationDomainOrigin
public enum TessellationDomainOrigin: UInt32 {
    case upperLeft = 0
    case lowerLeft = 1
    
    public static let upperLeftKHR = upperLeft
    public static let lowerLeftKHR = lowerLeft
    
    var vulkanValue: VkTessellationDomainOrigin {
        get {
            return VkTessellationDomainOrigin(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkTimeDomainEXT
public enum TimeDomainEXT: UInt32 {
    case deviceEXT = 0
    case clockMonotonicEXT = 1
    case clockMonotonicRawEXT = 2
    case queryPerformanceCounterEXT = 3
    
    var vulkanValue: VkTimeDomainEXT {
        get {
            return VkTimeDomainEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkValidationCacheHeaderVersionEXT
public enum ValidationCacheHeaderVersionEXT: UInt32 {
    case oneEXT = 1
    
    var vulkanValue: VkValidationCacheHeaderVersionEXT {
        get {
            return VkValidationCacheHeaderVersionEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkValidationCheckEXT
public enum ValidationCheckEXT: UInt32 {
    case allEXT = 0
    case shadersEXT = 1
    
    var vulkanValue: VkValidationCheckEXT {
        get {
            return VkValidationCheckEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkValidationFeatureDisableEXT
public enum ValidationFeatureDisableEXT: UInt32 {
    case allEXT = 0
    case shadersEXT = 1
    case threadSafetyEXT = 2
    case apiParametersEXT = 3
    case objectLifetimesEXT = 4
    case coreChecksEXT = 5
    case uniqueHandlesEXT = 6
    
    var vulkanValue: VkValidationFeatureDisableEXT {
        get {
            return VkValidationFeatureDisableEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkValidationFeatureEnableEXT
public enum ValidationFeatureEnableEXT: UInt32 {
    case gpuAssistedEXT = 0
    case gpuAssistedReserveBindingSlotEXT = 1
    case bestPracticesEXT = 2
    
    var vulkanValue: VkValidationFeatureEnableEXT {
        get {
            return VkValidationFeatureEnableEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkVendorId
public enum VendorId: UInt32 {
    case VIV = 65537
    case VSI = 65538
    case kazan = 65539
    
    var vulkanValue: VkVendorId {
        get {
            return VkVendorId(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkVertexInputRate
public enum VertexInputRate: UInt32 {
    case vertex = 0
    case instance = 1
    
    var vulkanValue: VkVertexInputRate {
        get {
            return VkVertexInputRate(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkViewportCoordinateSwizzleNV
public enum ViewportCoordinateSwizzleNV: UInt32 {
    case positiveXNV = 0
    case negativeXNV = 1
    case positiveYNV = 2
    case negativeYNV = 3
    case positiveZNV = 4
    case negativeZNV = 5
    case positiveWNV = 6
    case negativeWNV = 7
    
    var vulkanValue: VkViewportCoordinateSwizzleNV {
        get {
            return VkViewportCoordinateSwizzleNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkResult
public enum VulkanResult: Int32, Error {
    case success = 0
    case notReady = 1
    case timeout = 2
    case eventSet = 3
    case eventReset = 4
    case incomplete = 5
    case errorOutOfHostMemory = -1
    case errorOutOfDeviceMemory = -2
    case errorInitializationFailed = -3
    case errorDeviceLost = -4
    case errorMemoryMapFailed = -5
    case errorLayerNotPresent = -6
    case errorExtensionNotPresent = -7
    case errorFeatureNotPresent = -8
    case errorIncompatibleDriver = -9
    case errorTooManyObjects = -10
    case errorFormatNotSupported = -11
    case errorFragmentedPool = -12
    case errorOutOfPoolMemory = 1000069000
    case errorInvalidExternalHandle = 1000072003
    case errorSurfaceLostKHR = 1000000000
    case errorNativeWindowInUseKHR = 1000000001
    case suboptimalKHR = 1000001003
    case errorOutOfDateKHR = 1000001004
    case errorIncompatibleDisplayKHR = 1000003001
    case errorValidationFailedEXT = 1000011001
    case errorInvalidShaderNV = 1000012000
    case errorInvalidDrmFormatModifierPlaneLayoutEXT = 1000158000
    case errorFragmentationEXT = 1000161000
    case errorNotPermittedEXT = 1000174001
    case errorInvalidDeviceAddressEXT = 1000244000
    
    public static let errorOutOfPoolMemoryKHR = errorOutOfPoolMemory
    public static let errorInvalidExternalHandleKHR = errorInvalidExternalHandle
    
    var vulkanValue: VkResult {
        get {
            return VkResult(rawValue: self.rawValue)
        }
    }
}
