//
// Copyright (c) Alexander Ubillus. All rights reserved.
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// This code has been autogenerated. DO NOT edit this file.
//

// Flags.swift - contains all Vulkan handle types

import CVulkan
import SwiftVulkanUnions

// Mapped from VkAccessFlagBits
public struct AccessFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = AccessFlagBits(rawValue: 0)
    public static let indirectCommandRead = AccessFlagBits(rawValue: 0x00000001)
    public static let indexRead = AccessFlagBits(rawValue: 0x00000002)
    public static let vertexAttributeRead = AccessFlagBits(rawValue: 0x00000004)
    public static let uniformRead = AccessFlagBits(rawValue: 0x00000008)
    public static let inputAttachmentRead = AccessFlagBits(rawValue: 0x00000010)
    public static let shaderRead = AccessFlagBits(rawValue: 0x00000020)
    public static let shaderWrite = AccessFlagBits(rawValue: 0x00000040)
    public static let colorAttachmentRead = AccessFlagBits(rawValue: 0x00000080)
    public static let colorAttachmentWrite = AccessFlagBits(rawValue: 0x00000100)
    public static let depthStencilAttachmentRead = AccessFlagBits(rawValue: 0x00000200)
    public static let depthStencilAttachmentWrite = AccessFlagBits(rawValue: 0x00000400)
    public static let transferRead = AccessFlagBits(rawValue: 0x00000800)
    public static let transferWrite = AccessFlagBits(rawValue: 0x00001000)
    public static let hostRead = AccessFlagBits(rawValue: 0x00002000)
    public static let hostWrite = AccessFlagBits(rawValue: 0x00004000)
    public static let memoryRead = AccessFlagBits(rawValue: 0x00008000)
    public static let memoryWrite = AccessFlagBits(rawValue: 0x00010000)
    public static let transformFeedbackWriteEXT = AccessFlagBits(rawValue: 0x02000000)
    public static let transformFeedbackCounterReadEXT = AccessFlagBits(rawValue: 0x04000000)
    public static let transformFeedbackCounterWriteEXT = AccessFlagBits(rawValue: 0x08000000)
    public static let conditionalRenderingReadEXT = AccessFlagBits(rawValue: 0x00100000)
    public static let commandProcessReadNVX = AccessFlagBits(rawValue: 0x00020000)
    public static let commandProcessWriteNVX = AccessFlagBits(rawValue: 0x00040000)
    public static let colorAttachmentReadNoncoherentEXT = AccessFlagBits(rawValue: 0x00080000)
    public static let shadingRateImageReadNV = AccessFlagBits(rawValue: 0x00800000)
    public static let accelerationStructureReadNV = AccessFlagBits(rawValue: 0x00200000)
    public static let accelerationStructureWriteNV = AccessFlagBits(rawValue: 0x00400000)
    public static let fragmentDensityMapReadEXT = AccessFlagBits(rawValue: 0x01000000)
    
    var vulkanValue: VkAccessFlagBits {
        get {
            return VkAccessFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkAttachmentDescriptionFlagBits
public struct AttachmentDescriptionFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = AttachmentDescriptionFlagBits(rawValue: 0)
    public static let mayAlias = AttachmentDescriptionFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkAttachmentDescriptionFlagBits {
        get {
            return VkAttachmentDescriptionFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBufferCreateFlagBits
public struct BufferCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = BufferCreateFlagBits(rawValue: 0)
    public static let sparseBinding = BufferCreateFlagBits(rawValue: 0x00000001)
    public static let sparseResidency = BufferCreateFlagBits(rawValue: 0x00000002)
    public static let sparseAliased = BufferCreateFlagBits(rawValue: 0x00000004)
    public static let protected = BufferCreateFlagBits(rawValue: 0x00000008)
    public static let deviceAddressCaptureReplayEXT = BufferCreateFlagBits(rawValue: 0x00000010)
    
    var vulkanValue: VkBufferCreateFlagBits {
        get {
            return VkBufferCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBufferUsageFlagBits
public struct BufferUsageFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = BufferUsageFlagBits(rawValue: 0)
    public static let transferSrc = BufferUsageFlagBits(rawValue: 0x00000001)
    public static let transferDst = BufferUsageFlagBits(rawValue: 0x00000002)
    public static let uniformTexelBuffer = BufferUsageFlagBits(rawValue: 0x00000004)
    public static let storageTexelBuffer = BufferUsageFlagBits(rawValue: 0x00000008)
    public static let uniformBuffer = BufferUsageFlagBits(rawValue: 0x00000010)
    public static let storageBuffer = BufferUsageFlagBits(rawValue: 0x00000020)
    public static let indexBuffer = BufferUsageFlagBits(rawValue: 0x00000040)
    public static let vertexBuffer = BufferUsageFlagBits(rawValue: 0x00000080)
    public static let indirectBuffer = BufferUsageFlagBits(rawValue: 0x00000100)
    public static let transformFeedbackBufferEXT = BufferUsageFlagBits(rawValue: 0x00000800)
    public static let transformFeedbackCounterBufferEXT = BufferUsageFlagBits(rawValue: 0x00001000)
    public static let conditionalRenderingEXT = BufferUsageFlagBits(rawValue: 0x00000200)
    public static let rayTracingNV = BufferUsageFlagBits(rawValue: 0x00000400)
    public static let shaderDeviceAddressEXT = BufferUsageFlagBits(rawValue: 0x00020000)
    
    var vulkanValue: VkBufferUsageFlagBits {
        get {
            return VkBufferUsageFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBufferViewCreateFlags
public struct BufferViewCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = BufferViewCreateFlags(rawValue: 0)
    
    var vulkanValue: VkBufferViewCreateFlags {
        get {
            return VkBufferViewCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkBuildAccelerationStructureFlagBitsNV
public struct BuildAccelerationStructureFlagBitsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = BuildAccelerationStructureFlagBitsNV(rawValue: 0)
    public static let buildAccelerationStructureAllowUpdateNV = BuildAccelerationStructureFlagBitsNV(rawValue: 0x00000001)
    public static let buildAccelerationStructureAllowCompactionNV = BuildAccelerationStructureFlagBitsNV(rawValue: 0x00000002)
    public static let buildAccelerationStructurePreferFastTraceNV = BuildAccelerationStructureFlagBitsNV(rawValue: 0x00000004)
    public static let buildAccelerationStructurePreferFastBuildNV = BuildAccelerationStructureFlagBitsNV(rawValue: 0x00000008)
    public static let buildAccelerationStructureLowMemoryNV = BuildAccelerationStructureFlagBitsNV(rawValue: 0x00000010)
    
    var vulkanValue: VkBuildAccelerationStructureFlagBitsNV {
        get {
            return VkBuildAccelerationStructureFlagBitsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkColorComponentFlagBits
public struct ColorComponentFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ColorComponentFlagBits(rawValue: 0)
    public static let r = ColorComponentFlagBits(rawValue: 0x00000001)
    public static let g = ColorComponentFlagBits(rawValue: 0x00000002)
    public static let b = ColorComponentFlagBits(rawValue: 0x00000004)
    public static let a = ColorComponentFlagBits(rawValue: 0x00000008)
    
    var vulkanValue: VkColorComponentFlagBits {
        get {
            return VkColorComponentFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandBufferResetFlagBits
public struct CommandBufferResetFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandBufferResetFlagBits(rawValue: 0)
    public static let releaseResources = CommandBufferResetFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkCommandBufferResetFlagBits {
        get {
            return VkCommandBufferResetFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandBufferUsageFlagBits
public struct CommandBufferUsageFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandBufferUsageFlagBits(rawValue: 0)
    public static let oneTimeSubmit = CommandBufferUsageFlagBits(rawValue: 0x00000001)
    public static let renderPassContinue = CommandBufferUsageFlagBits(rawValue: 0x00000002)
    public static let simultaneousUse = CommandBufferUsageFlagBits(rawValue: 0x00000004)
    
    var vulkanValue: VkCommandBufferUsageFlagBits {
        get {
            return VkCommandBufferUsageFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandPoolCreateFlagBits
public struct CommandPoolCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandPoolCreateFlagBits(rawValue: 0)
    public static let transient = CommandPoolCreateFlagBits(rawValue: 0x00000001)
    public static let resetCommandBuffer = CommandPoolCreateFlagBits(rawValue: 0x00000002)
    public static let protected = CommandPoolCreateFlagBits(rawValue: 0x00000004)
    
    var vulkanValue: VkCommandPoolCreateFlagBits {
        get {
            return VkCommandPoolCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandPoolResetFlagBits
public struct CommandPoolResetFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandPoolResetFlagBits(rawValue: 0)
    public static let releaseResources = CommandPoolResetFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkCommandPoolResetFlagBits {
        get {
            return VkCommandPoolResetFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandPoolTrimFlags
public struct CommandPoolTrimFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandPoolTrimFlags(rawValue: 0)
    
    var vulkanValue: VkCommandPoolTrimFlags {
        get {
            return VkCommandPoolTrimFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCommandPoolTrimFlagsKHR
public struct CommandPoolTrimFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CommandPoolTrimFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkCommandPoolTrimFlagsKHR {
        get {
            return VkCommandPoolTrimFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCompositeAlphaFlagBitsKHR
public struct CompositeAlphaFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CompositeAlphaFlagBitsKHR(rawValue: 0)
    public static let compositeAlphaOpaqueKHR = CompositeAlphaFlagBitsKHR(rawValue: 0x00000001)
    public static let compositeAlphaPreMultipliedKHR = CompositeAlphaFlagBitsKHR(rawValue: 0x00000002)
    public static let compositeAlphaPostMultipliedKHR = CompositeAlphaFlagBitsKHR(rawValue: 0x00000004)
    public static let compositeAlphaInheritKHR = CompositeAlphaFlagBitsKHR(rawValue: 0x00000008)
    
    var vulkanValue: VkCompositeAlphaFlagBitsKHR {
        get {
            return VkCompositeAlphaFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkConditionalRenderingFlagBitsEXT
public struct ConditionalRenderingFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ConditionalRenderingFlagBitsEXT(rawValue: 0)
    public static let conditionalRenderingInvertedEXT = ConditionalRenderingFlagBitsEXT(rawValue: 0x00000001)
    
    var vulkanValue: VkConditionalRenderingFlagBitsEXT {
        get {
            return VkConditionalRenderingFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkCullModeFlagBits
public struct CullModeFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = CullModeFlagBits(rawValue: 0x00000000)
    public static let front = CullModeFlagBits(rawValue: 0x00000001)
    public static let back = CullModeFlagBits(rawValue: 0x00000002)
    public static let frontAndBack = CullModeFlagBits(rawValue: 0x00000003)
    
    var vulkanValue: VkCullModeFlagBits {
        get {
            return VkCullModeFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugReportFlagBitsEXT
public struct DebugReportFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DebugReportFlagBitsEXT(rawValue: 0)
    public static let debugReportInformationEXT = DebugReportFlagBitsEXT(rawValue: 0x00000001)
    public static let debugReportWarningEXT = DebugReportFlagBitsEXT(rawValue: 0x00000002)
    public static let debugReportPerformanceWarningEXT = DebugReportFlagBitsEXT(rawValue: 0x00000004)
    public static let debugReportErrorEXT = DebugReportFlagBitsEXT(rawValue: 0x00000008)
    public static let debugReportDebugEXT = DebugReportFlagBitsEXT(rawValue: 0x00000010)
    
    var vulkanValue: VkDebugReportFlagBitsEXT {
        get {
            return VkDebugReportFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugUtilsMessageSeverityFlagBitsEXT
public struct DebugUtilsMessageSeverityFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DebugUtilsMessageSeverityFlagBitsEXT(rawValue: 0)
    public static let debugUtilsMessageSeverityVerboseEXT = DebugUtilsMessageSeverityFlagBitsEXT(rawValue: 0x00000001)
    public static let debugUtilsMessageSeverityInfoEXT = DebugUtilsMessageSeverityFlagBitsEXT(rawValue: 0x00000010)
    public static let debugUtilsMessageSeverityWarningEXT = DebugUtilsMessageSeverityFlagBitsEXT(rawValue: 0x00000100)
    public static let debugUtilsMessageSeverityErrorEXT = DebugUtilsMessageSeverityFlagBitsEXT(rawValue: 0x00001000)
    
    var vulkanValue: VkDebugUtilsMessageSeverityFlagBitsEXT {
        get {
            return VkDebugUtilsMessageSeverityFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugUtilsMessageTypeFlagBitsEXT
public struct DebugUtilsMessageTypeFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DebugUtilsMessageTypeFlagBitsEXT(rawValue: 0)
    public static let debugUtilsMessageTypeGeneralEXT = DebugUtilsMessageTypeFlagBitsEXT(rawValue: 0x00000001)
    public static let debugUtilsMessageTypeValidationEXT = DebugUtilsMessageTypeFlagBitsEXT(rawValue: 0x00000002)
    public static let debugUtilsMessageTypePerformanceEXT = DebugUtilsMessageTypeFlagBitsEXT(rawValue: 0x00000004)
    
    var vulkanValue: VkDebugUtilsMessageTypeFlagBitsEXT {
        get {
            return VkDebugUtilsMessageTypeFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugUtilsMessengerCallbackDataFlagsEXT
public struct DebugUtilsMessengerCallbackDataFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DebugUtilsMessengerCallbackDataFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkDebugUtilsMessengerCallbackDataFlagsEXT {
        get {
            return VkDebugUtilsMessengerCallbackDataFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDebugUtilsMessengerCreateFlagsEXT
public struct DebugUtilsMessengerCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DebugUtilsMessengerCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkDebugUtilsMessengerCreateFlagsEXT {
        get {
            return VkDebugUtilsMessengerCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDependencyFlagBits
public struct DependencyFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DependencyFlagBits(rawValue: 0)
    public static let byRegion = DependencyFlagBits(rawValue: 0x00000001)
    public static let deviceGroup = DependencyFlagBits(rawValue: 0x00000004)
    public static let viewLocal = DependencyFlagBits(rawValue: 0x00000002)
    
    public static let viewLocalKHR = viewLocal
    public static let deviceGroupKHR = deviceGroup
    
    var vulkanValue: VkDependencyFlagBits {
        get {
            return VkDependencyFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorBindingFlagBitsEXT
public struct DescriptorBindingFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorBindingFlagBitsEXT(rawValue: 0)
    public static let descriptorBindingUpdateAfterBindEXT = DescriptorBindingFlagBitsEXT(rawValue: 0x00000001)
    public static let descriptorBindingUpdateUnusedWhilePendingEXT = DescriptorBindingFlagBitsEXT(rawValue: 0x00000002)
    public static let descriptorBindingPartiallyBoundEXT = DescriptorBindingFlagBitsEXT(rawValue: 0x00000004)
    public static let descriptorBindingVariableDescriptorCountEXT = DescriptorBindingFlagBitsEXT(rawValue: 0x00000008)
    
    var vulkanValue: VkDescriptorBindingFlagBitsEXT {
        get {
            return VkDescriptorBindingFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorPoolCreateFlagBits
public struct DescriptorPoolCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorPoolCreateFlagBits(rawValue: 0)
    public static let freeDescriptorSet = DescriptorPoolCreateFlagBits(rawValue: 0x00000001)
    public static let updateAfterBindEXT = DescriptorPoolCreateFlagBits(rawValue: 0x00000002)
    
    var vulkanValue: VkDescriptorPoolCreateFlagBits {
        get {
            return VkDescriptorPoolCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorPoolResetFlags
public struct DescriptorPoolResetFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorPoolResetFlags(rawValue: 0)
    
    var vulkanValue: VkDescriptorPoolResetFlags {
        get {
            return VkDescriptorPoolResetFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorSetLayoutCreateFlagBits
public struct DescriptorSetLayoutCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorSetLayoutCreateFlagBits(rawValue: 0)
    public static let pushDescriptorKHR = DescriptorSetLayoutCreateFlagBits(rawValue: 0x00000001)
    public static let updateAfterBindPoolEXT = DescriptorSetLayoutCreateFlagBits(rawValue: 0x00000002)
    
    var vulkanValue: VkDescriptorSetLayoutCreateFlagBits {
        get {
            return VkDescriptorSetLayoutCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorUpdateTemplateCreateFlags
public struct DescriptorUpdateTemplateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorUpdateTemplateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkDescriptorUpdateTemplateCreateFlags {
        get {
            return VkDescriptorUpdateTemplateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDescriptorUpdateTemplateCreateFlagsKHR
public struct DescriptorUpdateTemplateCreateFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DescriptorUpdateTemplateCreateFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkDescriptorUpdateTemplateCreateFlagsKHR {
        get {
            return VkDescriptorUpdateTemplateCreateFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDeviceCreateFlags
public struct DeviceCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DeviceCreateFlags(rawValue: 0)
    
    var vulkanValue: VkDeviceCreateFlags {
        get {
            return VkDeviceCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDeviceGroupPresentModeFlagBitsKHR
public struct DeviceGroupPresentModeFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DeviceGroupPresentModeFlagBitsKHR(rawValue: 0)
    public static let deviceGroupPresentModeLocalKHR = DeviceGroupPresentModeFlagBitsKHR(rawValue: 0x00000001)
    public static let deviceGroupPresentModeRemoteKHR = DeviceGroupPresentModeFlagBitsKHR(rawValue: 0x00000002)
    public static let deviceGroupPresentModeSumKHR = DeviceGroupPresentModeFlagBitsKHR(rawValue: 0x00000004)
    public static let deviceGroupPresentModeLocalMultiDeviceKHR = DeviceGroupPresentModeFlagBitsKHR(rawValue: 0x00000008)
    
    var vulkanValue: VkDeviceGroupPresentModeFlagBitsKHR {
        get {
            return VkDeviceGroupPresentModeFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDeviceQueueCreateFlagBits
public struct DeviceQueueCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DeviceQueueCreateFlagBits(rawValue: 0)
    public static let protected = DeviceQueueCreateFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkDeviceQueueCreateFlagBits {
        get {
            return VkDeviceQueueCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDisplayModeCreateFlagsKHR
public struct DisplayModeCreateFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DisplayModeCreateFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkDisplayModeCreateFlagsKHR {
        get {
            return VkDisplayModeCreateFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDisplayPlaneAlphaFlagBitsKHR
public struct DisplayPlaneAlphaFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DisplayPlaneAlphaFlagBitsKHR(rawValue: 0)
    public static let displayPlaneAlphaOpaqueKHR = DisplayPlaneAlphaFlagBitsKHR(rawValue: 0x00000001)
    public static let displayPlaneAlphaGlobalKHR = DisplayPlaneAlphaFlagBitsKHR(rawValue: 0x00000002)
    public static let displayPlaneAlphaPerPixelKHR = DisplayPlaneAlphaFlagBitsKHR(rawValue: 0x00000004)
    public static let displayPlaneAlphaPerPixelPremultipliedKHR = DisplayPlaneAlphaFlagBitsKHR(rawValue: 0x00000008)
    
    var vulkanValue: VkDisplayPlaneAlphaFlagBitsKHR {
        get {
            return VkDisplayPlaneAlphaFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkDisplaySurfaceCreateFlagsKHR
public struct DisplaySurfaceCreateFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = DisplaySurfaceCreateFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkDisplaySurfaceCreateFlagsKHR {
        get {
            return VkDisplaySurfaceCreateFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkEventCreateFlags
public struct EventCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = EventCreateFlags(rawValue: 0)
    
    var vulkanValue: VkEventCreateFlags {
        get {
            return VkEventCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalFenceFeatureFlagBits
public struct ExternalFenceFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalFenceFeatureFlagBits(rawValue: 0)
    public static let exportable = ExternalFenceFeatureFlagBits(rawValue: 0x00000001)
    public static let importable = ExternalFenceFeatureFlagBits(rawValue: 0x00000002)
    
    public static let exportableKHR = exportable
    public static let importableKHR = importable
    
    var vulkanValue: VkExternalFenceFeatureFlagBits {
        get {
            return VkExternalFenceFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalFenceFeatureFlagsKHR
public struct ExternalFenceFeatureFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalFenceFeatureFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalFenceFeatureFlagsKHR {
        get {
            return VkExternalFenceFeatureFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalFenceHandleTypeFlagBits
public struct ExternalFenceHandleTypeFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalFenceHandleTypeFlagBits(rawValue: 0)
    public static let opaqueFd = ExternalFenceHandleTypeFlagBits(rawValue: 0x00000001)
    public static let opaqueWin32 = ExternalFenceHandleTypeFlagBits(rawValue: 0x00000002)
    public static let opaqueWin32Kmt = ExternalFenceHandleTypeFlagBits(rawValue: 0x00000004)
    public static let syncFd = ExternalFenceHandleTypeFlagBits(rawValue: 0x00000008)
    
    public static let opaqueFdKHR = opaqueFd
    public static let opaqueWin32KHR = opaqueWin32
    public static let opaqueWin32KmtKHR = opaqueWin32Kmt
    public static let syncFdKHR = syncFd
    
    var vulkanValue: VkExternalFenceHandleTypeFlagBits {
        get {
            return VkExternalFenceHandleTypeFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalFenceHandleTypeFlagsKHR
public struct ExternalFenceHandleTypeFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalFenceHandleTypeFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalFenceHandleTypeFlagsKHR {
        get {
            return VkExternalFenceHandleTypeFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryFeatureFlagBits
public struct ExternalMemoryFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryFeatureFlagBits(rawValue: 0)
    public static let dedicatedOnly = ExternalMemoryFeatureFlagBits(rawValue: 0x00000001)
    public static let exportable = ExternalMemoryFeatureFlagBits(rawValue: 0x00000002)
    public static let importable = ExternalMemoryFeatureFlagBits(rawValue: 0x00000004)
    
    public static let dedicatedOnlyKHR = dedicatedOnly
    public static let exportableKHR = exportable
    public static let importableKHR = importable
    
    var vulkanValue: VkExternalMemoryFeatureFlagBits {
        get {
            return VkExternalMemoryFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryFeatureFlagBitsNV
public struct ExternalMemoryFeatureFlagBitsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryFeatureFlagBitsNV(rawValue: 0)
    public static let externalMemoryFeatureDedicatedOnlyNV = ExternalMemoryFeatureFlagBitsNV(rawValue: 0x00000001)
    public static let externalMemoryFeatureExportableNV = ExternalMemoryFeatureFlagBitsNV(rawValue: 0x00000002)
    public static let externalMemoryFeatureImportableNV = ExternalMemoryFeatureFlagBitsNV(rawValue: 0x00000004)
    
    var vulkanValue: VkExternalMemoryFeatureFlagBitsNV {
        get {
            return VkExternalMemoryFeatureFlagBitsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryFeatureFlagsKHR
public struct ExternalMemoryFeatureFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryFeatureFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalMemoryFeatureFlagsKHR {
        get {
            return VkExternalMemoryFeatureFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryHandleTypeFlagBits
public struct ExternalMemoryHandleTypeFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryHandleTypeFlagBits(rawValue: 0)
    public static let opaqueFd = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000001)
    public static let opaqueWin32 = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000002)
    public static let opaqueWin32Kmt = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000004)
    public static let d3d11Texture = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000008)
    public static let d3d11TextureKmt = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000010)
    public static let d3d12Heap = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000020)
    public static let d3d12Resource = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000040)
    public static let ernalMemoryHandleTypeDmaBufEXT = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000200)
    public static let ernalMemoryHandleTypeHostAllocationEXT = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000080)
    public static let ernalMemoryHandleTypeHostMappedForeignMemoryEXT = ExternalMemoryHandleTypeFlagBits(rawValue: 0x00000100)
    
    public static let opaqueFdKHR = opaqueFd
    public static let opaqueWin32KHR = opaqueWin32
    public static let opaqueWin32KmtKHR = opaqueWin32Kmt
    public static let d3d11TextureKHR = d3d11Texture
    public static let d3d11TextureKmtKHR = d3d11TextureKmt
    public static let d3d12HeapKHR = d3d12Heap
    public static let d3d12ResourceKHR = d3d12Resource
    
    var vulkanValue: VkExternalMemoryHandleTypeFlagBits {
        get {
            return VkExternalMemoryHandleTypeFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryHandleTypeFlagBitsNV
public struct ExternalMemoryHandleTypeFlagBitsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryHandleTypeFlagBitsNV(rawValue: 0)
    public static let externalMemoryHandleTypeOpaqueWin32NV = ExternalMemoryHandleTypeFlagBitsNV(rawValue: 0x00000001)
    public static let externalMemoryHandleTypeOpaqueWin32KmtNV = ExternalMemoryHandleTypeFlagBitsNV(rawValue: 0x00000002)
    public static let externalMemoryHandleTypeD3d11ImageNV = ExternalMemoryHandleTypeFlagBitsNV(rawValue: 0x00000004)
    public static let externalMemoryHandleTypeD3d11ImageKmtNV = ExternalMemoryHandleTypeFlagBitsNV(rawValue: 0x00000008)
    
    var vulkanValue: VkExternalMemoryHandleTypeFlagBitsNV {
        get {
            return VkExternalMemoryHandleTypeFlagBitsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalMemoryHandleTypeFlagsKHR
public struct ExternalMemoryHandleTypeFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalMemoryHandleTypeFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalMemoryHandleTypeFlagsKHR {
        get {
            return VkExternalMemoryHandleTypeFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalSemaphoreFeatureFlagBits
public struct ExternalSemaphoreFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalSemaphoreFeatureFlagBits(rawValue: 0)
    public static let exportable = ExternalSemaphoreFeatureFlagBits(rawValue: 0x00000001)
    public static let importable = ExternalSemaphoreFeatureFlagBits(rawValue: 0x00000002)
    
    public static let exportableKHR = exportable
    public static let importableKHR = importable
    
    var vulkanValue: VkExternalSemaphoreFeatureFlagBits {
        get {
            return VkExternalSemaphoreFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalSemaphoreFeatureFlagsKHR
public struct ExternalSemaphoreFeatureFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalSemaphoreFeatureFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalSemaphoreFeatureFlagsKHR {
        get {
            return VkExternalSemaphoreFeatureFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalSemaphoreHandleTypeFlagBits
public struct ExternalSemaphoreHandleTypeFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0)
    public static let opaqueFd = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0x00000001)
    public static let opaqueWin32 = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0x00000002)
    public static let opaqueWin32Kmt = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0x00000004)
    public static let d3d12Fence = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0x00000008)
    public static let syncFd = ExternalSemaphoreHandleTypeFlagBits(rawValue: 0x00000010)
    
    public static let opaqueFdKHR = opaqueFd
    public static let opaqueWin32KHR = opaqueWin32
    public static let opaqueWin32KmtKHR = opaqueWin32Kmt
    public static let d3d12FenceKHR = d3d12Fence
    public static let syncFdKHR = syncFd
    
    var vulkanValue: VkExternalSemaphoreHandleTypeFlagBits {
        get {
            return VkExternalSemaphoreHandleTypeFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkExternalSemaphoreHandleTypeFlagsKHR
public struct ExternalSemaphoreHandleTypeFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ExternalSemaphoreHandleTypeFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkExternalSemaphoreHandleTypeFlagsKHR {
        get {
            return VkExternalSemaphoreHandleTypeFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFenceCreateFlagBits
public struct FenceCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = FenceCreateFlagBits(rawValue: 0)
    public static let signaled = FenceCreateFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkFenceCreateFlagBits {
        get {
            return VkFenceCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFenceImportFlagBits
public struct FenceImportFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = FenceImportFlagBits(rawValue: 0)
    public static let temporary = FenceImportFlagBits(rawValue: 0x00000001)
    
    public static let temporaryKHR = temporary
    
    var vulkanValue: VkFenceImportFlagBits {
        get {
            return VkFenceImportFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFenceImportFlagsKHR
public struct FenceImportFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = FenceImportFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkFenceImportFlagsKHR {
        get {
            return VkFenceImportFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFormatFeatureFlagBits
public struct FormatFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = FormatFeatureFlagBits(rawValue: 0)
    public static let sampledImage = FormatFeatureFlagBits(rawValue: 0x00000001)
    public static let storageImage = FormatFeatureFlagBits(rawValue: 0x00000002)
    public static let storageImageAtomic = FormatFeatureFlagBits(rawValue: 0x00000004)
    public static let uniformTexelBuffer = FormatFeatureFlagBits(rawValue: 0x00000008)
    public static let storageTexelBuffer = FormatFeatureFlagBits(rawValue: 0x00000010)
    public static let storageTexelBufferAtomic = FormatFeatureFlagBits(rawValue: 0x00000020)
    public static let vertexBuffer = FormatFeatureFlagBits(rawValue: 0x00000040)
    public static let colorAttachment = FormatFeatureFlagBits(rawValue: 0x00000080)
    public static let colorAttachmentBlend = FormatFeatureFlagBits(rawValue: 0x00000100)
    public static let depthStencilAttachment = FormatFeatureFlagBits(rawValue: 0x00000200)
    public static let blitSrc = FormatFeatureFlagBits(rawValue: 0x00000400)
    public static let blitDst = FormatFeatureFlagBits(rawValue: 0x00000800)
    public static let sampledImageFilterLinear = FormatFeatureFlagBits(rawValue: 0x00001000)
    public static let transferSrc = FormatFeatureFlagBits(rawValue: 0x00004000)
    public static let transferDst = FormatFeatureFlagBits(rawValue: 0x00008000)
    public static let midpointChromaSamples = FormatFeatureFlagBits(rawValue: 0x00020000)
    public static let sampledImageYcbcrConversionLinearFilter = FormatFeatureFlagBits(rawValue: 0x00040000)
    public static let sampledImageYcbcrConversionSeparateReconstructionFilter = FormatFeatureFlagBits(rawValue: 0x00080000)
    public static let sampledImageYcbcrConversionChromaReconstructionExplicit = FormatFeatureFlagBits(rawValue: 0x00100000)
    public static let sampledImageYcbcrConversionChromaReconstructionExplicitForceable = FormatFeatureFlagBits(rawValue: 0x00200000)
    public static let disjoint = FormatFeatureFlagBits(rawValue: 0x00400000)
    public static let cositedChromaSamples = FormatFeatureFlagBits(rawValue: 0x00800000)
    public static let sampledImageFilterCubicIMG = FormatFeatureFlagBits(rawValue: 0x00002000)
    public static let sampledImageFilterMinmaxEXT = FormatFeatureFlagBits(rawValue: 0x00010000)
    public static let fragmentDensityMapEXT = FormatFeatureFlagBits(rawValue: 0x01000000)
    
    public static let transferSrcKHR = transferSrc
    public static let transferDstKHR = transferDst
    public static let midpointChromaSamplesKHR = midpointChromaSamples
    public static let sampledImageYcbcrConversionLinearFilterKHR = sampledImageYcbcrConversionLinearFilter
    public static let sampledImageYcbcrConversionSeparateReconstructionFilterKHR = sampledImageYcbcrConversionSeparateReconstructionFilter
    public static let sampledImageYcbcrConversionChromaReconstructionExplicitKHR = sampledImageYcbcrConversionChromaReconstructionExplicit
    public static let sampledImageYcbcrConversionChromaReconstructionExplicitForceableKHR = sampledImageYcbcrConversionChromaReconstructionExplicitForceable
    public static let disjointKHR = disjoint
    public static let cositedChromaSamplesKHR = cositedChromaSamples
    public static let sampledImageFilterCubicEXT = sampledImageFilterCubicIMG
    
    var vulkanValue: VkFormatFeatureFlagBits {
        get {
            return VkFormatFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkFramebufferCreateFlagBits
public struct FramebufferCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = FramebufferCreateFlagBits(rawValue: 0)
    public static let imagelessKHR = FramebufferCreateFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkFramebufferCreateFlagBits {
        get {
            return VkFramebufferCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkGeometryFlagBitsNV
public struct GeometryFlagBitsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = GeometryFlagBitsNV(rawValue: 0)
    public static let geometryOpaqueNV = GeometryFlagBitsNV(rawValue: 0x00000001)
    public static let geometryNoDuplicateAnyHitInvocationNV = GeometryFlagBitsNV(rawValue: 0x00000002)
    
    var vulkanValue: VkGeometryFlagBitsNV {
        get {
            return VkGeometryFlagBitsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkGeometryInstanceFlagBitsNV
public struct GeometryInstanceFlagBitsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = GeometryInstanceFlagBitsNV(rawValue: 0)
    public static let geometryInstanceTriangleCullDisableNV = GeometryInstanceFlagBitsNV(rawValue: 0x00000001)
    public static let geometryInstanceTriangleFrontCounterclockwiseNV = GeometryInstanceFlagBitsNV(rawValue: 0x00000002)
    public static let geometryInstanceForceOpaqueNV = GeometryInstanceFlagBitsNV(rawValue: 0x00000004)
    public static let geometryInstanceForceNoOpaqueNV = GeometryInstanceFlagBitsNV(rawValue: 0x00000008)
    
    var vulkanValue: VkGeometryInstanceFlagBitsNV {
        get {
            return VkGeometryInstanceFlagBitsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkHeadlessSurfaceCreateFlagsEXT
public struct HeadlessSurfaceCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = HeadlessSurfaceCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkHeadlessSurfaceCreateFlagsEXT {
        get {
            return VkHeadlessSurfaceCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageAspectFlagBits
public struct ImageAspectFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ImageAspectFlagBits(rawValue: 0)
    public static let color = ImageAspectFlagBits(rawValue: 0x00000001)
    public static let depth = ImageAspectFlagBits(rawValue: 0x00000002)
    public static let stencil = ImageAspectFlagBits(rawValue: 0x00000004)
    public static let metadata = ImageAspectFlagBits(rawValue: 0x00000008)
    public static let plane0 = ImageAspectFlagBits(rawValue: 0x00000010)
    public static let plane1 = ImageAspectFlagBits(rawValue: 0x00000020)
    public static let plane2 = ImageAspectFlagBits(rawValue: 0x00000040)
    public static let memoryPlane0EXT = ImageAspectFlagBits(rawValue: 0x00000080)
    public static let memoryPlane1EXT = ImageAspectFlagBits(rawValue: 0x00000100)
    public static let memoryPlane2EXT = ImageAspectFlagBits(rawValue: 0x00000200)
    public static let memoryPlane3EXT = ImageAspectFlagBits(rawValue: 0x00000400)
    
    public static let plane0KHR = plane0
    public static let plane1KHR = plane1
    public static let plane2KHR = plane2
    
    var vulkanValue: VkImageAspectFlagBits {
        get {
            return VkImageAspectFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageCreateFlagBits
public struct ImageCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ImageCreateFlagBits(rawValue: 0)
    public static let imageCreateFlagsSparseBinding = ImageCreateFlagBits(rawValue: 0x00000001)
    public static let imageCreateFlagsSparseResidency = ImageCreateFlagBits(rawValue: 0x00000002)
    public static let imageCreateFlagsSparseAliased = ImageCreateFlagBits(rawValue: 0x00000004)
    public static let imageCreateFlagsMutableFormat = ImageCreateFlagBits(rawValue: 0x00000008)
    public static let imageCreateFlagsCubeCompatible = ImageCreateFlagBits(rawValue: 0x00000010)
    public static let imageCreateFlagsAlias = ImageCreateFlagBits(rawValue: 0x00000400)
    public static let imageCreateFlagsSplitInstanceBindRegions = ImageCreateFlagBits(rawValue: 0x00000040)
    public static let imageCreateFlags2dArrayCompatible = ImageCreateFlagBits(rawValue: 0x00000020)
    public static let imageCreateFlagsBlockTexelViewCompatible = ImageCreateFlagBits(rawValue: 0x00000080)
    public static let imageCreateFlagsExtendedUsage = ImageCreateFlagBits(rawValue: 0x00000100)
    public static let imageCreateFlagsProtected = ImageCreateFlagBits(rawValue: 0x00000800)
    public static let imageCreateFlagsDisjoint = ImageCreateFlagBits(rawValue: 0x00000200)
    public static let imageCreateFlagsCornerSampledNV = ImageCreateFlagBits(rawValue: 0x00002000)
    public static let imageCreateFlagsSampleLocationsCompatibleDepthEXT = ImageCreateFlagBits(rawValue: 0x00001000)
    public static let imageCreateFlagsSubsampledEXT = ImageCreateFlagBits(rawValue: 0x00004000)
    
    public static let imageCreateFlagsSplitInstanceBindRegionsKHR = imageCreateFlagsSplitInstanceBindRegions
    public static let imageCreateFlags2dArrayCompatibleKHR = imageCreateFlags2dArrayCompatible
    public static let imageCreateFlagsBlockTexelViewCompatibleKHR = imageCreateFlagsBlockTexelViewCompatible
    public static let imageCreateFlagsExtendedUsageKHR = imageCreateFlagsExtendedUsage
    public static let imageCreateFlagsDisjointKHR = imageCreateFlagsDisjoint
    public static let imageCreateFlagsAliasKHR = imageCreateFlagsAlias
    
    var vulkanValue: VkImageCreateFlagBits {
        get {
            return VkImageCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageUsageFlagBits
public struct ImageUsageFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ImageUsageFlagBits(rawValue: 0)
    public static let transferSrc = ImageUsageFlagBits(rawValue: 0x00000001)
    public static let transferDst = ImageUsageFlagBits(rawValue: 0x00000002)
    public static let sampled = ImageUsageFlagBits(rawValue: 0x00000004)
    public static let storage = ImageUsageFlagBits(rawValue: 0x00000008)
    public static let colorAttachment = ImageUsageFlagBits(rawValue: 0x00000010)
    public static let depthStencilAttachment = ImageUsageFlagBits(rawValue: 0x00000020)
    public static let transientAttachment = ImageUsageFlagBits(rawValue: 0x00000040)
    public static let inputAttachment = ImageUsageFlagBits(rawValue: 0x00000080)
    public static let shadingRateImageNV = ImageUsageFlagBits(rawValue: 0x00000100)
    public static let fragmentDensityMapEXT = ImageUsageFlagBits(rawValue: 0x00000200)
    
    var vulkanValue: VkImageUsageFlagBits {
        get {
            return VkImageUsageFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkImageViewCreateFlagBits
public struct ImageViewCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ImageViewCreateFlagBits(rawValue: 0)
    public static let fragmentDensityMapDynamicEXT = ImageViewCreateFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkImageViewCreateFlagBits {
        get {
            return VkImageViewCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkIndirectCommandsLayoutUsageFlagBitsNVX
public struct IndirectCommandsLayoutUsageFlagBitsNVX: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = IndirectCommandsLayoutUsageFlagBitsNVX(rawValue: 0)
    public static let indirectCommandsLayoutUsageUnorderedSequencesNVX = IndirectCommandsLayoutUsageFlagBitsNVX(rawValue: 0x00000001)
    public static let indirectCommandsLayoutUsageSparseSequencesNVX = IndirectCommandsLayoutUsageFlagBitsNVX(rawValue: 0x00000002)
    public static let indirectCommandsLayoutUsageEmptyExecutionsNVX = IndirectCommandsLayoutUsageFlagBitsNVX(rawValue: 0x00000004)
    public static let indirectCommandsLayoutUsageIndexedSequencesNVX = IndirectCommandsLayoutUsageFlagBitsNVX(rawValue: 0x00000008)
    
    var vulkanValue: VkIndirectCommandsLayoutUsageFlagBitsNVX {
        get {
            return VkIndirectCommandsLayoutUsageFlagBitsNVX(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkInstanceCreateFlags
public struct InstanceCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = InstanceCreateFlags(rawValue: 0)
    
    var vulkanValue: VkInstanceCreateFlags {
        get {
            return VkInstanceCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryAllocateFlagBits
public struct MemoryAllocateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = MemoryAllocateFlagBits(rawValue: 0)
    public static let deviceMask = MemoryAllocateFlagBits(rawValue: 0x00000001)
    
    public static let deviceMaskKHR = deviceMask
    
    var vulkanValue: VkMemoryAllocateFlagBits {
        get {
            return VkMemoryAllocateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryAllocateFlagsKHR
public struct MemoryAllocateFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = MemoryAllocateFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkMemoryAllocateFlagsKHR {
        get {
            return VkMemoryAllocateFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryHeapFlagBits
public struct MemoryHeapFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = MemoryHeapFlagBits(rawValue: 0)
    public static let deviceLocal = MemoryHeapFlagBits(rawValue: 0x00000001)
    public static let multiInstance = MemoryHeapFlagBits(rawValue: 0x00000002)
    
    public static let multiInstanceKHR = multiInstance
    
    var vulkanValue: VkMemoryHeapFlagBits {
        get {
            return VkMemoryHeapFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryMapFlags
public struct MemoryMapFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = MemoryMapFlags(rawValue: 0)
    
    var vulkanValue: VkMemoryMapFlags {
        get {
            return VkMemoryMapFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkMemoryPropertyFlagBits
public struct MemoryPropertyFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = MemoryPropertyFlagBits(rawValue: 0)
    public static let deviceLocal = MemoryPropertyFlagBits(rawValue: 0x00000001)
    public static let hostVisible = MemoryPropertyFlagBits(rawValue: 0x00000002)
    public static let hostCoherent = MemoryPropertyFlagBits(rawValue: 0x00000004)
    public static let hostCached = MemoryPropertyFlagBits(rawValue: 0x00000008)
    public static let lazilyAllocated = MemoryPropertyFlagBits(rawValue: 0x00000010)
    public static let protected = MemoryPropertyFlagBits(rawValue: 0x00000020)
    public static let deviceCoherentAMD = MemoryPropertyFlagBits(rawValue: 0x00000040)
    public static let deviceUncachedAMD = MemoryPropertyFlagBits(rawValue: 0x00000080)
    
    var vulkanValue: VkMemoryPropertyFlagBits {
        get {
            return VkMemoryPropertyFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkObjectEntryUsageFlagBitsNVX
public struct ObjectEntryUsageFlagBitsNVX: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ObjectEntryUsageFlagBitsNVX(rawValue: 0)
    public static let objectEntryUsageGraphicsNVX = ObjectEntryUsageFlagBitsNVX(rawValue: 0x00000001)
    public static let objectEntryUsageComputeNVX = ObjectEntryUsageFlagBitsNVX(rawValue: 0x00000002)
    
    var vulkanValue: VkObjectEntryUsageFlagBitsNVX {
        get {
            return VkObjectEntryUsageFlagBitsNVX(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPeerMemoryFeatureFlagBits
public struct PeerMemoryFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PeerMemoryFeatureFlagBits(rawValue: 0)
    public static let copySrc = PeerMemoryFeatureFlagBits(rawValue: 0x00000001)
    public static let copyDst = PeerMemoryFeatureFlagBits(rawValue: 0x00000002)
    public static let genericSrc = PeerMemoryFeatureFlagBits(rawValue: 0x00000004)
    public static let genericDst = PeerMemoryFeatureFlagBits(rawValue: 0x00000008)
    
    public static let copySrcKHR = copySrc
    public static let copyDstKHR = copyDst
    public static let genericSrcKHR = genericSrc
    public static let genericDstKHR = genericDst
    
    var vulkanValue: VkPeerMemoryFeatureFlagBits {
        get {
            return VkPeerMemoryFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPeerMemoryFeatureFlagsKHR
public struct PeerMemoryFeatureFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PeerMemoryFeatureFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkPeerMemoryFeatureFlagsKHR {
        get {
            return VkPeerMemoryFeatureFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCacheCreateFlags
public struct PipelineCacheCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCacheCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineCacheCreateFlags {
        get {
            return VkPipelineCacheCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineColorBlendStateCreateFlags
public struct PipelineColorBlendStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineColorBlendStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineColorBlendStateCreateFlags {
        get {
            return VkPipelineColorBlendStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCompilerControlFlagBitsAMD
public struct PipelineCompilerControlFlagBitsAMD: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCompilerControlFlagBitsAMD(rawValue: 0)
    
    var vulkanValue: VkPipelineCompilerControlFlagBitsAMD {
        get {
            return VkPipelineCompilerControlFlagBitsAMD(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCoverageModulationStateCreateFlagsNV
public struct PipelineCoverageModulationStateCreateFlagsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCoverageModulationStateCreateFlagsNV(rawValue: 0)
    
    var vulkanValue: VkPipelineCoverageModulationStateCreateFlagsNV {
        get {
            return VkPipelineCoverageModulationStateCreateFlagsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCoverageReductionStateCreateFlagsNV
public struct PipelineCoverageReductionStateCreateFlagsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCoverageReductionStateCreateFlagsNV(rawValue: 0)
    
    var vulkanValue: VkPipelineCoverageReductionStateCreateFlagsNV {
        get {
            return VkPipelineCoverageReductionStateCreateFlagsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCoverageToColorStateCreateFlagsNV
public struct PipelineCoverageToColorStateCreateFlagsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCoverageToColorStateCreateFlagsNV(rawValue: 0)
    
    var vulkanValue: VkPipelineCoverageToColorStateCreateFlagsNV {
        get {
            return VkPipelineCoverageToColorStateCreateFlagsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCreateFlagBits
public struct PipelineCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCreateFlagBits(rawValue: 0)
    public static let disableOptimization = PipelineCreateFlagBits(rawValue: 0x00000001)
    public static let allowDerivatives = PipelineCreateFlagBits(rawValue: 0x00000002)
    public static let derivative = PipelineCreateFlagBits(rawValue: 0x00000004)
    public static let viewIndexFromDeviceIndex = PipelineCreateFlagBits(rawValue: 0x00000008)
    public static let dispatchBase = PipelineCreateFlagBits(rawValue: 0x00000010)
    public static let deferCompileNV = PipelineCreateFlagBits(rawValue: 0x00000020)
    public static let captureStatisticsKHR = PipelineCreateFlagBits(rawValue: 0x00000040)
    public static let captureInternalRepresentationsKHR = PipelineCreateFlagBits(rawValue: 0x00000080)
    
    public static let viewIndexFromDeviceIndexKHR = viewIndexFromDeviceIndex
    public static let dispatchBaseKHR = dispatchBase
    
    var vulkanValue: VkPipelineCreateFlagBits {
        get {
            return VkPipelineCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineCreationFeedbackFlagBitsEXT
public struct PipelineCreationFeedbackFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineCreationFeedbackFlagBitsEXT(rawValue: 0)
    public static let pipelineCreationFeedbackValidEXT = PipelineCreationFeedbackFlagBitsEXT(rawValue: 0x00000001)
    public static let pipelineCreationFeedbackApplicationPipelineCacheHitEXT = PipelineCreationFeedbackFlagBitsEXT(rawValue: 0x00000002)
    public static let pipelineCreationFeedbackBasePipelineAccelerationEXT = PipelineCreationFeedbackFlagBitsEXT(rawValue: 0x00000004)
    
    var vulkanValue: VkPipelineCreationFeedbackFlagBitsEXT {
        get {
            return VkPipelineCreationFeedbackFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineDepthStencilStateCreateFlags
public struct PipelineDepthStencilStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineDepthStencilStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineDepthStencilStateCreateFlags {
        get {
            return VkPipelineDepthStencilStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineDiscardRectangleStateCreateFlagsEXT
public struct PipelineDiscardRectangleStateCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineDiscardRectangleStateCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkPipelineDiscardRectangleStateCreateFlagsEXT {
        get {
            return VkPipelineDiscardRectangleStateCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineDynamicStateCreateFlags
public struct PipelineDynamicStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineDynamicStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineDynamicStateCreateFlags {
        get {
            return VkPipelineDynamicStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineInputAssemblyStateCreateFlags
public struct PipelineInputAssemblyStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineInputAssemblyStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineInputAssemblyStateCreateFlags {
        get {
            return VkPipelineInputAssemblyStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineLayoutCreateFlags
public struct PipelineLayoutCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineLayoutCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineLayoutCreateFlags {
        get {
            return VkPipelineLayoutCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineMultisampleStateCreateFlags
public struct PipelineMultisampleStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineMultisampleStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineMultisampleStateCreateFlags {
        get {
            return VkPipelineMultisampleStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineRasterizationConservativeStateCreateFlagsEXT
public struct PipelineRasterizationConservativeStateCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineRasterizationConservativeStateCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkPipelineRasterizationConservativeStateCreateFlagsEXT {
        get {
            return VkPipelineRasterizationConservativeStateCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineRasterizationDepthClipStateCreateFlagsEXT
public struct PipelineRasterizationDepthClipStateCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineRasterizationDepthClipStateCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkPipelineRasterizationDepthClipStateCreateFlagsEXT {
        get {
            return VkPipelineRasterizationDepthClipStateCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineRasterizationStateCreateFlags
public struct PipelineRasterizationStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineRasterizationStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineRasterizationStateCreateFlags {
        get {
            return VkPipelineRasterizationStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineRasterizationStateStreamCreateFlagsEXT
public struct PipelineRasterizationStateStreamCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineRasterizationStateStreamCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkPipelineRasterizationStateStreamCreateFlagsEXT {
        get {
            return VkPipelineRasterizationStateStreamCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineShaderStageCreateFlagBits
public struct PipelineShaderStageCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineShaderStageCreateFlagBits(rawValue: 0)
    public static let allowVaryingSubgroupSizeEXT = PipelineShaderStageCreateFlagBits(rawValue: 0x00000001)
    public static let requireFullSubgroupsEXT = PipelineShaderStageCreateFlagBits(rawValue: 0x00000002)
    
    var vulkanValue: VkPipelineShaderStageCreateFlagBits {
        get {
            return VkPipelineShaderStageCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineStageFlagBits
public struct PipelineStageFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineStageFlagBits(rawValue: 0)
    public static let topOfPipe = PipelineStageFlagBits(rawValue: 0x00000001)
    public static let drawIndirect = PipelineStageFlagBits(rawValue: 0x00000002)
    public static let vertexInput = PipelineStageFlagBits(rawValue: 0x00000004)
    public static let vertexShader = PipelineStageFlagBits(rawValue: 0x00000008)
    public static let tessellationControlShader = PipelineStageFlagBits(rawValue: 0x00000010)
    public static let tessellationEvaluationShader = PipelineStageFlagBits(rawValue: 0x00000020)
    public static let geometryShader = PipelineStageFlagBits(rawValue: 0x00000040)
    public static let fragmentShader = PipelineStageFlagBits(rawValue: 0x00000080)
    public static let earlyFragmentTests = PipelineStageFlagBits(rawValue: 0x00000100)
    public static let lateFragmentTests = PipelineStageFlagBits(rawValue: 0x00000200)
    public static let colorAttachmentOutput = PipelineStageFlagBits(rawValue: 0x00000400)
    public static let computeShader = PipelineStageFlagBits(rawValue: 0x00000800)
    public static let transfer = PipelineStageFlagBits(rawValue: 0x00001000)
    public static let bottomOfPipe = PipelineStageFlagBits(rawValue: 0x00002000)
    public static let host = PipelineStageFlagBits(rawValue: 0x00004000)
    public static let allGraphics = PipelineStageFlagBits(rawValue: 0x00008000)
    public static let allCommands = PipelineStageFlagBits(rawValue: 0x00010000)
    public static let transformFeedbackEXT = PipelineStageFlagBits(rawValue: 0x01000000)
    public static let conditionalRenderingEXT = PipelineStageFlagBits(rawValue: 0x00040000)
    public static let commandProcessNVX = PipelineStageFlagBits(rawValue: 0x00020000)
    public static let shadingRateImageNV = PipelineStageFlagBits(rawValue: 0x00400000)
    public static let rayTracingShaderNV = PipelineStageFlagBits(rawValue: 0x00200000)
    public static let accelerationStructureBuildNV = PipelineStageFlagBits(rawValue: 0x02000000)
    public static let taskShaderNV = PipelineStageFlagBits(rawValue: 0x00080000)
    public static let meshShaderNV = PipelineStageFlagBits(rawValue: 0x00100000)
    public static let fragmentDensityProcessEXT = PipelineStageFlagBits(rawValue: 0x00800000)
    
    var vulkanValue: VkPipelineStageFlagBits {
        get {
            return VkPipelineStageFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineTessellationStateCreateFlags
public struct PipelineTessellationStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineTessellationStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineTessellationStateCreateFlags {
        get {
            return VkPipelineTessellationStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineVertexInputStateCreateFlags
public struct PipelineVertexInputStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineVertexInputStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineVertexInputStateCreateFlags {
        get {
            return VkPipelineVertexInputStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineViewportStateCreateFlags
public struct PipelineViewportStateCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineViewportStateCreateFlags(rawValue: 0)
    
    var vulkanValue: VkPipelineViewportStateCreateFlags {
        get {
            return VkPipelineViewportStateCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkPipelineViewportSwizzleStateCreateFlagsNV
public struct PipelineViewportSwizzleStateCreateFlagsNV: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = PipelineViewportSwizzleStateCreateFlagsNV(rawValue: 0)
    
    var vulkanValue: VkPipelineViewportSwizzleStateCreateFlagsNV {
        get {
            return VkPipelineViewportSwizzleStateCreateFlagsNV(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryControlFlagBits
public struct QueryControlFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = QueryControlFlagBits(rawValue: 0)
    public static let precise = QueryControlFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkQueryControlFlagBits {
        get {
            return VkQueryControlFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryPipelineStatisticFlagBits
public struct QueryPipelineStatisticFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = QueryPipelineStatisticFlagBits(rawValue: 0)
    public static let inputAssemblyVertices = QueryPipelineStatisticFlagBits(rawValue: 0x00000001)
    public static let inputAssemblyPrimitives = QueryPipelineStatisticFlagBits(rawValue: 0x00000002)
    public static let vertexShaderInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000004)
    public static let geometryShaderInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000008)
    public static let geometryShaderPrimitives = QueryPipelineStatisticFlagBits(rawValue: 0x00000010)
    public static let clippingInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000020)
    public static let clippingPrimitives = QueryPipelineStatisticFlagBits(rawValue: 0x00000040)
    public static let fragmentShaderInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000080)
    public static let tessellationControlShaderPatches = QueryPipelineStatisticFlagBits(rawValue: 0x00000100)
    public static let tessellationEvaluationShaderInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000200)
    public static let computeShaderInvocations = QueryPipelineStatisticFlagBits(rawValue: 0x00000400)
    
    var vulkanValue: VkQueryPipelineStatisticFlagBits {
        get {
            return VkQueryPipelineStatisticFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryPoolCreateFlags
public struct QueryPoolCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = QueryPoolCreateFlags(rawValue: 0)
    
    var vulkanValue: VkQueryPoolCreateFlags {
        get {
            return VkQueryPoolCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueryResultFlagBits
public struct QueryResultFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = QueryResultFlagBits(rawValue: 0)
    public static let queryResultFlags64 = QueryResultFlagBits(rawValue: 0x00000001)
    public static let queryResultFlagsWait = QueryResultFlagBits(rawValue: 0x00000002)
    public static let queryResultFlagsWithAvailability = QueryResultFlagBits(rawValue: 0x00000004)
    public static let queryResultFlagsPartial = QueryResultFlagBits(rawValue: 0x00000008)
    
    var vulkanValue: VkQueryResultFlagBits {
        get {
            return VkQueryResultFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkQueueFlagBits
public struct QueueFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = QueueFlagBits(rawValue: 0)
    public static let graphics = QueueFlagBits(rawValue: 0x00000001)
    public static let compute = QueueFlagBits(rawValue: 0x00000002)
    public static let transfer = QueueFlagBits(rawValue: 0x00000004)
    public static let sparseBinding = QueueFlagBits(rawValue: 0x00000008)
    public static let protected = QueueFlagBits(rawValue: 0x00000010)
    
    var vulkanValue: VkQueueFlagBits {
        get {
            return VkQueueFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkRenderPassCreateFlagBits
public struct RenderPassCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = RenderPassCreateFlagBits(rawValue: 0)
    
    var vulkanValue: VkRenderPassCreateFlagBits {
        get {
            return VkRenderPassCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkResolveModeFlagBitsKHR
public struct ResolveModeFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let resolveModeNoneKHR = ResolveModeFlagBitsKHR(rawValue: 0x00000000)
    public static let resolveModeSampleZeroKHR = ResolveModeFlagBitsKHR(rawValue: 0x00000001)
    public static let resolveModeAverageKHR = ResolveModeFlagBitsKHR(rawValue: 0x00000002)
    public static let resolveModeMinKHR = ResolveModeFlagBitsKHR(rawValue: 0x00000004)
    public static let resolveModeMaxKHR = ResolveModeFlagBitsKHR(rawValue: 0x00000008)
    
    var vulkanValue: VkResolveModeFlagBitsKHR {
        get {
            return VkResolveModeFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSampleCountFlagBits
public struct SampleCountFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SampleCountFlagBits(rawValue: 0)
    public static let sampleCountFlags1 = SampleCountFlagBits(rawValue: 0x00000001)
    public static let sampleCountFlags2 = SampleCountFlagBits(rawValue: 0x00000002)
    public static let sampleCountFlags4 = SampleCountFlagBits(rawValue: 0x00000004)
    public static let sampleCountFlags8 = SampleCountFlagBits(rawValue: 0x00000008)
    public static let sampleCountFlags16 = SampleCountFlagBits(rawValue: 0x00000010)
    public static let sampleCountFlags32 = SampleCountFlagBits(rawValue: 0x00000020)
    public static let sampleCountFlags64 = SampleCountFlagBits(rawValue: 0x00000040)
    
    var vulkanValue: VkSampleCountFlagBits {
        get {
            return VkSampleCountFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSamplerCreateFlagBits
public struct SamplerCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SamplerCreateFlagBits(rawValue: 0)
    public static let subsampledEXT = SamplerCreateFlagBits(rawValue: 0x00000001)
    public static let subsampledCoarseReconstructionEXT = SamplerCreateFlagBits(rawValue: 0x00000002)
    
    var vulkanValue: VkSamplerCreateFlagBits {
        get {
            return VkSamplerCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSemaphoreCreateFlags
public struct SemaphoreCreateFlags: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SemaphoreCreateFlags(rawValue: 0)
    
    var vulkanValue: VkSemaphoreCreateFlags {
        get {
            return VkSemaphoreCreateFlags(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSemaphoreImportFlagBits
public struct SemaphoreImportFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SemaphoreImportFlagBits(rawValue: 0)
    public static let temporary = SemaphoreImportFlagBits(rawValue: 0x00000001)
    
    public static let temporaryKHR = temporary
    
    var vulkanValue: VkSemaphoreImportFlagBits {
        get {
            return VkSemaphoreImportFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSemaphoreImportFlagsKHR
public struct SemaphoreImportFlagsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SemaphoreImportFlagsKHR(rawValue: 0)
    
    var vulkanValue: VkSemaphoreImportFlagsKHR {
        get {
            return VkSemaphoreImportFlagsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShaderCorePropertiesFlagBitsAMD
public struct ShaderCorePropertiesFlagBitsAMD: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ShaderCorePropertiesFlagBitsAMD(rawValue: 0)
    
    var vulkanValue: VkShaderCorePropertiesFlagBitsAMD {
        get {
            return VkShaderCorePropertiesFlagBitsAMD(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShaderModuleCreateFlagBits
public struct ShaderModuleCreateFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ShaderModuleCreateFlagBits(rawValue: 0)
    
    var vulkanValue: VkShaderModuleCreateFlagBits {
        get {
            return VkShaderModuleCreateFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkShaderStageFlagBits
public struct ShaderStageFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ShaderStageFlagBits(rawValue: 0)
    public static let vertex = ShaderStageFlagBits(rawValue: 0x00000001)
    public static let tessellationControl = ShaderStageFlagBits(rawValue: 0x00000002)
    public static let tessellationEvaluation = ShaderStageFlagBits(rawValue: 0x00000004)
    public static let geometry = ShaderStageFlagBits(rawValue: 0x00000008)
    public static let fragment = ShaderStageFlagBits(rawValue: 0x00000010)
    public static let compute = ShaderStageFlagBits(rawValue: 0x00000020)
    public static let allGraphics = ShaderStageFlagBits(rawValue: 0x0000001f)
    public static let all = ShaderStageFlagBits(rawValue: 0x7fffffff)
    public static let raygenNV = ShaderStageFlagBits(rawValue: 0x00000100)
    public static let anyHitNV = ShaderStageFlagBits(rawValue: 0x00000200)
    public static let closestHitNV = ShaderStageFlagBits(rawValue: 0x00000400)
    public static let missNV = ShaderStageFlagBits(rawValue: 0x00000800)
    public static let intersectionNV = ShaderStageFlagBits(rawValue: 0x00001000)
    public static let callableNV = ShaderStageFlagBits(rawValue: 0x00002000)
    public static let taskNV = ShaderStageFlagBits(rawValue: 0x00000040)
    public static let meshNV = ShaderStageFlagBits(rawValue: 0x00000080)
    
    var vulkanValue: VkShaderStageFlagBits {
        get {
            return VkShaderStageFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSparseImageFormatFlagBits
public struct SparseImageFormatFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SparseImageFormatFlagBits(rawValue: 0)
    public static let singleMiptail = SparseImageFormatFlagBits(rawValue: 0x00000001)
    public static let alignedMipSize = SparseImageFormatFlagBits(rawValue: 0x00000002)
    public static let nonstandardBlockSize = SparseImageFormatFlagBits(rawValue: 0x00000004)
    
    var vulkanValue: VkSparseImageFormatFlagBits {
        get {
            return VkSparseImageFormatFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSparseMemoryBindFlagBits
public struct SparseMemoryBindFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SparseMemoryBindFlagBits(rawValue: 0)
    public static let metadata = SparseMemoryBindFlagBits(rawValue: 0x00000001)
    
    var vulkanValue: VkSparseMemoryBindFlagBits {
        get {
            return VkSparseMemoryBindFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkStencilFaceFlagBits
public struct StencilFaceFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = StencilFaceFlagBits(rawValue: 0)
    public static let front = StencilFaceFlagBits(rawValue: 0x00000001)
    public static let back = StencilFaceFlagBits(rawValue: 0x00000002)
    public static let frontAndBack = StencilFaceFlagBits(rawValue: 0x00000003)
    
    public static let stencilFrontAndBack = frontAndBack
    
    var vulkanValue: VkStencilFaceFlagBits {
        get {
            return VkStencilFaceFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSubgroupFeatureFlagBits
public struct SubgroupFeatureFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SubgroupFeatureFlagBits(rawValue: 0)
    public static let basic = SubgroupFeatureFlagBits(rawValue: 0x00000001)
    public static let vote = SubgroupFeatureFlagBits(rawValue: 0x00000002)
    public static let arithmetic = SubgroupFeatureFlagBits(rawValue: 0x00000004)
    public static let ballot = SubgroupFeatureFlagBits(rawValue: 0x00000008)
    public static let shuffle = SubgroupFeatureFlagBits(rawValue: 0x00000010)
    public static let shuffleRelative = SubgroupFeatureFlagBits(rawValue: 0x00000020)
    public static let clustered = SubgroupFeatureFlagBits(rawValue: 0x00000040)
    public static let quad = SubgroupFeatureFlagBits(rawValue: 0x00000080)
    public static let partitionedNV = SubgroupFeatureFlagBits(rawValue: 0x00000100)
    
    var vulkanValue: VkSubgroupFeatureFlagBits {
        get {
            return VkSubgroupFeatureFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSubpassDescriptionFlagBits
public struct SubpassDescriptionFlagBits: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SubpassDescriptionFlagBits(rawValue: 0)
    public static let perViewAttributesNVX = SubpassDescriptionFlagBits(rawValue: 0x00000001)
    public static let perViewPositionXOnlyNVX = SubpassDescriptionFlagBits(rawValue: 0x00000002)
    
    var vulkanValue: VkSubpassDescriptionFlagBits {
        get {
            return VkSubpassDescriptionFlagBits(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSurfaceCounterFlagBitsEXT
public struct SurfaceCounterFlagBitsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SurfaceCounterFlagBitsEXT(rawValue: 0)
    public static let surfaceCounterVblankEXT = SurfaceCounterFlagBitsEXT(rawValue: 0x00000001)
    
    var vulkanValue: VkSurfaceCounterFlagBitsEXT {
        get {
            return VkSurfaceCounterFlagBitsEXT(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSurfaceTransformFlagBitsKHR
public struct SurfaceTransformFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SurfaceTransformFlagBitsKHR(rawValue: 0)
    public static let surfaceTransformIdentityKHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000001)
    public static let surfaceTransformRotate90KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000002)
    public static let surfaceTransformRotate180KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000004)
    public static let surfaceTransformRotate270KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000008)
    public static let surfaceTransformHorizontalMirrorKHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000010)
    public static let surfaceTransformHorizontalMirrorRotate90KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000020)
    public static let surfaceTransformHorizontalMirrorRotate180KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000040)
    public static let surfaceTransformHorizontalMirrorRotate270KHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000080)
    public static let surfaceTransformInheritKHR = SurfaceTransformFlagBitsKHR(rawValue: 0x00000100)
    
    var vulkanValue: VkSurfaceTransformFlagBitsKHR {
        get {
            return VkSurfaceTransformFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkSwapchainCreateFlagBitsKHR
public struct SwapchainCreateFlagBitsKHR: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = SwapchainCreateFlagBitsKHR(rawValue: 0)
    public static let swapchainCreateSplitInstanceBindRegionsKHR = SwapchainCreateFlagBitsKHR(rawValue: 0x00000001)
    public static let swapchainCreateProtectedKHR = SwapchainCreateFlagBitsKHR(rawValue: 0x00000002)
    public static let swapchainCreateMutableFormatKHR = SwapchainCreateFlagBitsKHR(rawValue: 0x00000004)
    
    var vulkanValue: VkSwapchainCreateFlagBitsKHR {
        get {
            return VkSwapchainCreateFlagBitsKHR(rawValue: self.rawValue)
        }
    }
}

// Mapped from VkValidationCacheCreateFlagsEXT
public struct ValidationCacheCreateFlagsEXT: OptionSet {
    public let rawValue: UInt32
    
    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
    
    public static let none = ValidationCacheCreateFlagsEXT(rawValue: 0)
    
    var vulkanValue: VkValidationCacheCreateFlagsEXT {
        get {
            return VkValidationCacheCreateFlagsEXT(rawValue: self.rawValue)
        }
    }
}
